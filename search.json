[
  {
    "objectID": "quarto.html",
    "href": "quarto.html",
    "title": "Publishing with Quarto",
    "section": "",
    "text": "Quarto is an open-source scientific and technical publishing system. It makes it easier to publish articles, books and websites for techincal content.\n\n\nInstall Quarto.\n$ wget https://github.com/quarto-dev/quarto-cli/releases/download/v1.5.57/quarto-1.5.57-linux-amd64.deb\n$ sudo dpkg -i quarto-1.5.57-linux-amd64.deb\nInstall librsvg2-bin package to work with svg.\n$ sudo apt install librsvg2-bin\nInstall Latex.\n$ sudo quarto install tinytex\n\n\n\nQuarto .qmd files contain a combination of markdown and executable code cells. For the scope of this article, we’ll limit ourselves to Markdown.\nCreate a file with name demo.qmd with the following content.\n\n# Quarto Demo\n\nThis is a demonstration of authoring articles with [Quarto](https://quarto.qmd).\n\n## A Bit of Math\n\nMarkdown supports embedding LaTeX for writing mathematics.\n\nFor example, the area of a circle with radius $r$ is $\\pi r^2$.\n\nAnd:\n\n$\\Sigma_{x=1}^{n}{x} = \\frac{n(n+1)}{2}$\n\n## The Circle\n\nHere is a sample C program using [csketch](https://gitub.com/anandology/csketch) library.\n\n```c\n#include &lt;sketch.h&gt;\n\nint main()\n{\n    // draw a circle with center as (0, 0) and radius 100\n    draw_circle(0, 0, 100);\n\n    // save all the shapes draws to lesson2.svg\n    save_sketch(\"circle.svg\");\n}\n```\n\nAnd that generates a `circle.svg` with the following image.\n\n![](circle.svg)\n\nNow convert this to HTML by running:\n$ quarto render demo.qmd --to html\n...\n\nOutput created: demo.html\nOpen demo.html in your browser to see the output.\nYou can also convert this to PDF by running:\n$ quarto render demo.qmd --to pdf\n...\n\nOutput created: demo.pdf\nYou can open demo.pdf to see how it looks like.\n\n\n\nLet’s see how to create a quarto book, manage it as a github repo and publish it as a website using github pages.\n\nThe steps:\n\nCreate a github repository\nCreate a quarto project for the book\nQuarto Preview and edit _quarto.yml to update title of the book\nCommit all the new files to git\nDeploy the quarto book to github pages to get a website for the book\nSetup a github workflow to automate the publishing\nAdd new content to the book\n\n\n\nCreate a new github repository. You may call it fcp-practice or programming-practice or something else.\nOnce the repository is created, clone it on to your computer.\n$ git clone https://github.com/&lt;your-username&gt;/&lt;repo-name&gt;\n\n$ cd &lt;repo-name&gt;\n\n\n\nRun command quarto create.\n$ quarto create\n ? Create\n ❯ project\n   extension\nSelect project and press Enter.\n$ quarto create\n ? Create › project\n ? Type\n   default\n   website\n   blog\n ❯ book\n   confluence\nSelect book and press Enter.\n$ quarto create\n ? Create › project\n ? Type › book\n ? Directory › .\nEnter . for directory and press Enter.\n$ quarto create\n ? Create › project\n ? Type › book\n ? Directory › .\nCreating project at /tmp/quarto2:\n  - Created _quarto.yml\n  - Created index.qmd\n  - Created intro.qmd\n  - Created summary.qmd\n  - Created references.qmd\n  - Created cover.png\n  - Created references.bib\n ? Open With\n ❯ vscode\n   (don't open)\nSelect Open With vscode and press Enter.\n\n\n\nIn the terminal, run quarto preview to open the preview in your browser.\nYou can edit and files in vscode and the preview will be updated live in the browser.\nYou can edit the _quarto.yml file to update the title and author fields. Once you save the file in vscode, the preview will also be updated.\n\n\n\nEdit the .gitignore file and add a new line _book/. This is to avoid adding the HTML generated by quarto to the repository.\nAdd all files to repository by running:\ngit add .\nCommit all the changes:\ngit commit\n\n\n\n\nYou can publish the book as a website to github.\nTODO\n\n\n\nSee Publishing to github pages in quarto documentation.\n\n\n\nClone the fcp-blog repo and start preview.\ngit clone https://github.com/anandology/fcp-blog\ncd fcp-blog\nquarto preview\nCreate a new post introducing yourself.\ncd posts\ncp anand.qmd your-name.qmd\nwget -O images/your-name-cover.jpg 'https://any-image-url-from-web'\nYou should see your post appearing in the quarto preview.",
    "crumbs": [
      "Publishing with Quarto"
    ]
  },
  {
    "objectID": "quarto.html#getting-started",
    "href": "quarto.html#getting-started",
    "title": "Publishing with Quarto",
    "section": "",
    "text": "Quarto .qmd files contain a combination of markdown and executable code cells. For the scope of this article, we’ll limit ourselves to Markdown.\nCreate a file with name demo.qmd with the following content.\n\n# Quarto Demo\n\nThis is a demonstration of authoring articles with [Quarto](https://quarto.qmd).\n\n## A Bit of Math\n\nMarkdown supports embedding LaTeX for writing mathematics.\n\nFor example, the area of a circle with radius $r$ is $\\pi r^2$.\n\nAnd:\n\n$\\Sigma_{x=1}^{n}{x} = \\frac{n(n+1)}{2}$\n\n## The Circle\n\nHere is a sample C program using [csketch](https://gitub.com/anandology/csketch) library.\n\n```c\n#include &lt;sketch.h&gt;\n\nint main()\n{\n    // draw a circle with center as (0, 0) and radius 100\n    draw_circle(0, 0, 100);\n\n    // save all the shapes draws to lesson2.svg\n    save_sketch(\"circle.svg\");\n}\n```\n\nAnd that generates a `circle.svg` with the following image.\n\n![](circle.svg)\n\nNow convert this to HTML by running:\n$ quarto render demo.qmd --to html\n...\n\nOutput created: demo.html\nOpen demo.html in your browser to see the output.\nYou can also convert this to PDF by running:\n$ quarto render demo.qmd --to pdf\n...\n\nOutput created: demo.pdf\nYou can open demo.pdf to see how it looks like.",
    "crumbs": [
      "Publishing with Quarto"
    ]
  },
  {
    "objectID": "quarto.html#creating-a-quarto-book",
    "href": "quarto.html#creating-a-quarto-book",
    "title": "Publishing with Quarto",
    "section": "",
    "text": "Let’s see how to create a quarto book, manage it as a github repo and publish it as a website using github pages.\n\nThe steps:\n\nCreate a github repository\nCreate a quarto project for the book\nQuarto Preview and edit _quarto.yml to update title of the book\nCommit all the new files to git\nDeploy the quarto book to github pages to get a website for the book\nSetup a github workflow to automate the publishing\nAdd new content to the book\n\n\n\nCreate a new github repository. You may call it fcp-practice or programming-practice or something else.\nOnce the repository is created, clone it on to your computer.\n$ git clone https://github.com/&lt;your-username&gt;/&lt;repo-name&gt;\n\n$ cd &lt;repo-name&gt;\n\n\n\nRun command quarto create.\n$ quarto create\n ? Create\n ❯ project\n   extension\nSelect project and press Enter.\n$ quarto create\n ? Create › project\n ? Type\n   default\n   website\n   blog\n ❯ book\n   confluence\nSelect book and press Enter.\n$ quarto create\n ? Create › project\n ? Type › book\n ? Directory › .\nEnter . for directory and press Enter.\n$ quarto create\n ? Create › project\n ? Type › book\n ? Directory › .\nCreating project at /tmp/quarto2:\n  - Created _quarto.yml\n  - Created index.qmd\n  - Created intro.qmd\n  - Created summary.qmd\n  - Created references.qmd\n  - Created cover.png\n  - Created references.bib\n ? Open With\n ❯ vscode\n   (don't open)\nSelect Open With vscode and press Enter.\n\n\n\nIn the terminal, run quarto preview to open the preview in your browser.\nYou can edit and files in vscode and the preview will be updated live in the browser.\nYou can edit the _quarto.yml file to update the title and author fields. Once you save the file in vscode, the preview will also be updated.\n\n\n\nEdit the .gitignore file and add a new line _book/. This is to avoid adding the HTML generated by quarto to the repository.\nAdd all files to repository by running:\ngit add .\nCommit all the changes:\ngit commit",
    "crumbs": [
      "Publishing with Quarto"
    ]
  },
  {
    "objectID": "quarto.html#publishing-the-book",
    "href": "quarto.html#publishing-the-book",
    "title": "Publishing with Quarto",
    "section": "",
    "text": "You can publish the book as a website to github.\nTODO",
    "crumbs": [
      "Publishing with Quarto"
    ]
  },
  {
    "objectID": "quarto.html#setting-up-github-actions",
    "href": "quarto.html#setting-up-github-actions",
    "title": "Publishing with Quarto",
    "section": "",
    "text": "See Publishing to github pages in quarto documentation.",
    "crumbs": [
      "Publishing with Quarto"
    ]
  },
  {
    "objectID": "quarto.html#thu-sep-26---task",
    "href": "quarto.html#thu-sep-26---task",
    "title": "Publishing with Quarto",
    "section": "",
    "text": "Clone the fcp-blog repo and start preview.\ngit clone https://github.com/anandology/fcp-blog\ncd fcp-blog\nquarto preview\nCreate a new post introducing yourself.\ncd posts\ncp anand.qmd your-name.qmd\nwget -O images/your-name-cover.jpg 'https://any-image-url-from-web'\nYou should see your post appearing in the quarto preview.",
    "crumbs": [
      "Publishing with Quarto"
    ]
  },
  {
    "objectID": "problem-sets/ps1.html",
    "href": "problem-sets/ps1.html",
    "title": "Fundamentals of Computing and Programming",
    "section": "",
    "text": "This is a practice problem set and there problems are not counted for your grade.\nAll these problems are expected to be solved in C programming language and all these problems require using the sketch library.\nPlease refer to the the following resources before wokring on this problem set.\n\nCSketch API\nCSketch Gallery\nLecture Notes 02",
    "crumbs": [
      "Problem Sets",
      "Problem Set 1"
    ]
  },
  {
    "objectID": "problem-sets/ps1.html#problem-set-1",
    "href": "problem-sets/ps1.html#problem-set-1",
    "title": "Fundamentals of Computing and Programming",
    "section": "",
    "text": "This is a practice problem set and there problems are not counted for your grade.\nAll these problems are expected to be solved in C programming language and all these problems require using the sketch library.\nPlease refer to the the following resources before wokring on this problem set.\n\nCSketch API\nCSketch Gallery\nLecture Notes 02",
    "crumbs": [
      "Problem Sets",
      "Problem Set 1"
    ]
  },
  {
    "objectID": "problem-sets/ps1.html#p1.1---mirror-circles",
    "href": "problem-sets/ps1.html#p1.1---mirror-circles",
    "title": "Fundamentals of Computing and Programming",
    "section": "P1.1 - Mirror Circles",
    "text": "P1.1 - Mirror Circles\nWrite a program to draw the following picture. The radius of the largest circle is 100 pixels.",
    "crumbs": [
      "Problem Sets",
      "Problem Set 1"
    ]
  },
  {
    "objectID": "problem-sets/ps1.html#p1.2-row-of-circles",
    "href": "problem-sets/ps1.html#p1.2-row-of-circles",
    "title": "Fundamentals of Computing and Programming",
    "section": "P1.2: Row of Circles",
    "text": "P1.2: Row of Circles\nWrite a program to draw the following picture. The radius of the each circle is 50 pixels.",
    "crumbs": [
      "Problem Sets",
      "Problem Set 1"
    ]
  },
  {
    "objectID": "problem-sets/ps1.html#p1.3-row-of-concentric-circles",
    "href": "problem-sets/ps1.html#p1.3-row-of-concentric-circles",
    "title": "Fundamentals of Computing and Programming",
    "section": "P1.3: Row of Concentric Circles",
    "text": "P1.3: Row of Concentric Circles\nWrite a program to draw the following picture. The radius of the largest circle is 50 pixels.",
    "crumbs": [
      "Problem Sets",
      "Problem Set 1"
    ]
  },
  {
    "objectID": "problem-sets/ps1.html#p1.4-growing-circles",
    "href": "problem-sets/ps1.html#p1.4-growing-circles",
    "title": "Fundamentals of Computing and Programming",
    "section": "P1.4: Growing Circles",
    "text": "P1.4: Growing Circles\nWrite a program to draw the following picture. The radius of the smallest circle is 30 pixels and the radius of each subsequent circle is 15 pixels more than the previous one. So the radius of all these circles will be 30, 45, 60, 75 and 90 respectively.\nTry to write your program in a modular way to make it easier to change the radius to a different value and accommodate a different number of circles.",
    "crumbs": [
      "Problem Sets",
      "Problem Set 1"
    ]
  },
  {
    "objectID": "problem-sets/ps1.html#p1.5-growing-candle-lights",
    "href": "problem-sets/ps1.html#p1.5-growing-candle-lights",
    "title": "Fundamentals of Computing and Programming",
    "section": "P1.5: Growing Candle Lights",
    "text": "P1.5: Growing Candle Lights\nWrite a program to draw the following picture. This picture is similar the one in the previous problem, except the circle has been replaced by a shape containing three circles touching at the bottom point. In each shape, the inner two circles have radius of \\(\\frac{1}{3}^{rd}\\) and \\(\\frac{2}{3}^{rd}\\) of the outer circle.\nThe radii of the outer circles will be 30, 45, 60, 75 and 90 pixels respectively.",
    "crumbs": [
      "Problem Sets",
      "Problem Set 1"
    ]
  },
  {
    "objectID": "problem-sets/ps1.html#p1.6-grid-of-candle-lights",
    "href": "problem-sets/ps1.html#p1.6-grid-of-candle-lights",
    "title": "Fundamentals of Computing and Programming",
    "section": "P1.6: Grid of Candle Lights",
    "text": "P1.6: Grid of Candle Lights\nWrite a program to draw the following picture.\nYou can refer to the Grid of Circles program from the Sketch Gallery.",
    "crumbs": [
      "Problem Sets",
      "Problem Set 1"
    ]
  },
  {
    "objectID": "problem-sets/ps1.html#p1.7-grid-of-concentric-circles",
    "href": "problem-sets/ps1.html#p1.7-grid-of-concentric-circles",
    "title": "Fundamentals of Computing and Programming",
    "section": "P1.7: Grid of Concentric Circles",
    "text": "P1.7: Grid of Concentric Circles\nWrite a program to draw the following picture.\nThis is similar to the Grid of Concentric Circles program from the Sketch Gallery, but with slighly different order.",
    "crumbs": [
      "Problem Sets",
      "Problem Set 1"
    ]
  },
  {
    "objectID": "problem-sets/ps1.html#p1.8-the-complex-grid",
    "href": "problem-sets/ps1.html#p1.8-the-complex-grid",
    "title": "Fundamentals of Computing and Programming",
    "section": "P1.8: The Complex Grid",
    "text": "P1.8: The Complex Grid\nWrite a program to draw the following picture.\nAgain, the Grid of Concentric Circles program from the Sketch Gallery, is the starting point for you. It is just a small trick.",
    "crumbs": [
      "Problem Sets",
      "Problem Set 1"
    ]
  },
  {
    "objectID": "problem-sets/ps1.html#p1.9-packed-circles",
    "href": "problem-sets/ps1.html#p1.9-packed-circles",
    "title": "Fundamentals of Computing and Programming",
    "section": "P1.9: Packed circles",
    "text": "P1.9: Packed circles\nWrite a program to draw the following picture. The radius of the outer circle is 150 pixels.\nHint: You may need to make use of some trigonometry.",
    "crumbs": [
      "Problem Sets",
      "Problem Set 1"
    ]
  },
  {
    "objectID": "problem-sets/ps1.html#p1.10-packed-candle-lights",
    "href": "problem-sets/ps1.html#p1.10-packed-candle-lights",
    "title": "Fundamentals of Computing and Programming",
    "section": "P1.10: Packed Candle Lights",
    "text": "P1.10: Packed Candle Lights\nWrite a program to draw the following picture. The radius of the outer circle is 150 pixels.\nHint: You may need to make use of some trigonometry.",
    "crumbs": [
      "Problem Sets",
      "Problem Set 1"
    ]
  },
  {
    "objectID": "cmdline.html",
    "href": "cmdline.html",
    "title": "Introduction to Unix Command Line",
    "section": "",
    "text": "The primary mode of interacting with a unix system is using the command line. While it may look like using a graphical user interface is lot easier to use, it is not usually optimal in most of the cases. While the command-line interface may have steeper learning curve, the ability to automate things easily pays off the effort very quickly.\nLet me recall the quote that we have discussed from SICP.\n\nEvery powerful language has three mechanisms for accomplishing this:\n\nprimitive expressions, which represent the simplest entities the language is concerned with,\nmeans of combination, by which compound elements are built from simpler ones, and\nmeans of abstraction, by which compound elements can be named and manipulated as units.\n\n\n– Structure and Interpretation of Computer Programs\nConsider the task of creating a mp4 video from frame images generated by your C program, like some of you have done. It requires running the program, converting each of the SVG image generated by the program into png and combining all of them together to make it into a video.\nThe typical way of doing this using a graphical user interface would really cumbersome. That may involve doing something like this:\n\nRun your program\nOpen the image converter program, select an svg file and press a button to convert it to png and repeat it for each one of the images\nOpen the video maker program, select all the png files that need to be included, press a button to make the video\n\nIt is really tedious to do this again and again. If we look this in the lens SICP, the primitive expressions of this system are your program, image converter and video maker. The only way to combine them is by doing each one of them one after the other and there is no way to abstrat them, give it a name and use like a single operation.\nWhen you think of command line, you can take combine the primitive commands by running them one after the other, but you can also abstract them and give it a name by making a script and running just that script.\nIn this lesson, we’ll learn the how command-line interface works and how to use it effectively.\n\n\nPlease install the required packages to install the commands used in this lesson.\n$ sudo apt-get -y install coreutils figlet cowsay wbritish\n\n\n\nLet’s start with priting a hello message.\nOpen your terminal and type echo hello world. You’ll see the message hello world printed back.\n$ echo hello world\nhello world\n\n\n\nOne of the beautiful things about Unix command line is the ability to connect the output of one command as input as another one.\nWe’ve seen two command seq and figlet. Wouldn’t it be nice if we can print the numbers as large characters using figlet? For this we need to connect the output of seq to the input of figlet.\n$ seq 5 | figlet\n _\n/ |\n| |\n| |\n|_|\n\n ____\n|___ \\\n  __) |\n / __/\n|_____|\n\n _____\n|___ /\n  |_ \\\n ___) |\n|____/\n\n _  _\n| || |\n| || |_\n|__   _|\n   |_|\n\n ____\n| ___|\n|___ \\\n ___) |\n|____/\nThe | charater creates a pipeline connecting output of the first command to the input of the second command.\n\n\n\n\n\nnumbers.sh\n\nn=$1\nseq $n | figlet\n\nThe $1 is the first argument that is passed to the script.\nRemember that in a shell script, space around = are not accepted. So n=$1 is valid, but n = $1 is invalid. We’ll learn more about the nuances of shell scripts later.\nAnd you can run it using: bash numbers.sh\n$ bash numbers.sh 2\n _\n/ |\n| |\n| |\n|_|\n\n ____\n|___ \\\n  __) |\n / __/\n|_____|\n\n\n\n\nThe Unix Episode | Episode 32 of Everything is Everything\nThe Unix Shell - Software Carpentry\nVI Tutorial for Beginners - Tyler’s Guides",
    "crumbs": [
      "Introduction to Unix Command Line"
    ]
  },
  {
    "objectID": "cmdline.html#quick-setup",
    "href": "cmdline.html#quick-setup",
    "title": "Introduction to Unix Command Line",
    "section": "",
    "text": "Please install the required packages to install the commands used in this lesson.\n$ sudo apt-get -y install coreutils figlet cowsay wbritish",
    "crumbs": [
      "Introduction to Unix Command Line"
    ]
  },
  {
    "objectID": "cmdline.html#getting-started",
    "href": "cmdline.html#getting-started",
    "title": "Introduction to Unix Command Line",
    "section": "",
    "text": "Let’s start with priting a hello message.\nOpen your terminal and type echo hello world. You’ll see the message hello world printed back.\n$ echo hello world\nhello world",
    "crumbs": [
      "Introduction to Unix Command Line"
    ]
  },
  {
    "objectID": "cmdline.html#pipes",
    "href": "cmdline.html#pipes",
    "title": "Introduction to Unix Command Line",
    "section": "",
    "text": "One of the beautiful things about Unix command line is the ability to connect the output of one command as input as another one.\nWe’ve seen two command seq and figlet. Wouldn’t it be nice if we can print the numbers as large characters using figlet? For this we need to connect the output of seq to the input of figlet.\n$ seq 5 | figlet\n _\n/ |\n| |\n| |\n|_|\n\n ____\n|___ \\\n  __) |\n / __/\n|_____|\n\n _____\n|___ /\n  |_ \\\n ___) |\n|____/\n\n _  _\n| || |\n| || |_\n|__   _|\n   |_|\n\n ____\n| ___|\n|___ \\\n ___) |\n|____/\nThe | charater creates a pipeline connecting output of the first command to the input of the second command.",
    "crumbs": [
      "Introduction to Unix Command Line"
    ]
  },
  {
    "objectID": "cmdline.html#shell-scripts",
    "href": "cmdline.html#shell-scripts",
    "title": "Introduction to Unix Command Line",
    "section": "",
    "text": "numbers.sh\n\nn=$1\nseq $n | figlet\n\nThe $1 is the first argument that is passed to the script.\nRemember that in a shell script, space around = are not accepted. So n=$1 is valid, but n = $1 is invalid. We’ll learn more about the nuances of shell scripts later.\nAnd you can run it using: bash numbers.sh\n$ bash numbers.sh 2\n _\n/ |\n| |\n| |\n|_|\n\n ____\n|___ \\\n  __) |\n / __/\n|_____|",
    "crumbs": [
      "Introduction to Unix Command Line"
    ]
  },
  {
    "objectID": "cmdline.html#references",
    "href": "cmdline.html#references",
    "title": "Introduction to Unix Command Line",
    "section": "",
    "text": "The Unix Episode | Episode 32 of Everything is Everything\nThe Unix Shell - Software Carpentry\nVI Tutorial for Beginners - Tyler’s Guides",
    "crumbs": [
      "Introduction to Unix Command Line"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Software Setup",
    "section": "",
    "text": "This page explains how to setup the coding environment for Ubuntu.\n\n\n\n\n\n\nNote\n\n\n\nIf you are have a computer running Windows, please follow instructions on Installing Ubuntu on Windows using WSL before moving further.\n\n\n\n\nFor this course, we support only Ubuntu distribution of Linux. If you have any other distribution, please find out how to install GCC compiler.\nRun the following commands to install C compiler and other build tools.\nsudo apt-get update\nsudo apt-get install build-essential\n\n\n\nVisual Studio Code (vscode) is the recommended editor for this course. Please install it from Visual Studio Code Downloads page.\n\n\n\n\n\n\nWarning\n\n\n\nIf you are on Ubuntu 18.04, please install an older version by running the following commands.\nwget https://update.code.visualstudio.com/1.75.1/linux-deb-x64/stable\nsudo dpkg -i code_1.75.1-1675893397_amd64.deb\n\n\n\n\n\nFollow the following instructions to install SVG Extension to preview SVG files directly in vscode. SVG is an image format that we are going to use in the course.\n\nOpen vscode and press Ctrl+P\nType ext install jock.svg and press Enter\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nYou need to install WSL extension only if you are running Windows.\n\n\nFollow the following instructions to install the extension.\n\nOpen vscode and press Ctrl+P\nType ext install ms-vscode-remote.remote-wsl and press Enter\n\n\n\n\nIt is recommended to create a new directory for all your programs in this course. Let’s call it computing.\nOpen your terminal and run the following command.\nmkdir computing\nYou can change the current directory to that using:\ncd computing\n\n\n\nCSketch is a library for drawing simple shapes in C programming language and it is required for this course.\nRun the following command in your terminal to install it.\ncurl https://anandology.github.io/csketch/install.sh | bash\nThis will download the csketch library to your current directory and also adds a sample file circle.c and a Makefile to build your C code.\n\n\n\nOpen your computing directory in vscode by running code . in your terminal.\n$ code .\nIf you are on Windows, you should run this in Ubuntu running in WSL. The WSL Extension of vscode would have made the code command available in your environment.\nOnce the vscode is open, open a terminal from the menu View -&gt; Terminal. You can also open the same using keyboard shortcut Ctrl + `.\n\n\n\nIn the terminal, run make to compile the circle.c file in the current directory.\n$ make\ngcc -I sketch -L sketch circle.c  -lm -l sketch -o circle\nThat compiled the circle.c and created executable file circle.\nRun the circle program.\n$ ./circle\nThat would have created a file circle.svg. Select the circle.svg file in the left sidebar to open it now press the preview button.\n\n\n\nOnce you click preview, you’ll be able to see the image in the right.",
    "crumbs": [
      "Software Setup"
    ]
  },
  {
    "objectID": "setup.html#install-c-compiler",
    "href": "setup.html#install-c-compiler",
    "title": "Software Setup",
    "section": "",
    "text": "For this course, we support only Ubuntu distribution of Linux. If you have any other distribution, please find out how to install GCC compiler.\nRun the following commands to install C compiler and other build tools.\nsudo apt-get update\nsudo apt-get install build-essential",
    "crumbs": [
      "Software Setup"
    ]
  },
  {
    "objectID": "setup.html#install-visual-studio-code",
    "href": "setup.html#install-visual-studio-code",
    "title": "Software Setup",
    "section": "",
    "text": "Visual Studio Code (vscode) is the recommended editor for this course. Please install it from Visual Studio Code Downloads page.\n\n\n\n\n\n\nWarning\n\n\n\nIf you are on Ubuntu 18.04, please install an older version by running the following commands.\nwget https://update.code.visualstudio.com/1.75.1/linux-deb-x64/stable\nsudo dpkg -i code_1.75.1-1675893397_amd64.deb",
    "crumbs": [
      "Software Setup"
    ]
  },
  {
    "objectID": "setup.html#install-svg-extension-in-vscode",
    "href": "setup.html#install-svg-extension-in-vscode",
    "title": "Software Setup",
    "section": "",
    "text": "Follow the following instructions to install SVG Extension to preview SVG files directly in vscode. SVG is an image format that we are going to use in the course.\n\nOpen vscode and press Ctrl+P\nType ext install jock.svg and press Enter",
    "crumbs": [
      "Software Setup"
    ]
  },
  {
    "objectID": "setup.html#install-wsl-extension-in-vscode",
    "href": "setup.html#install-wsl-extension-in-vscode",
    "title": "Software Setup",
    "section": "",
    "text": "Warning\n\n\n\nYou need to install WSL extension only if you are running Windows.\n\n\nFollow the following instructions to install the extension.\n\nOpen vscode and press Ctrl+P\nType ext install ms-vscode-remote.remote-wsl and press Enter",
    "crumbs": [
      "Software Setup"
    ]
  },
  {
    "objectID": "setup.html#make-a-directory-for-your-code",
    "href": "setup.html#make-a-directory-for-your-code",
    "title": "Software Setup",
    "section": "",
    "text": "It is recommended to create a new directory for all your programs in this course. Let’s call it computing.\nOpen your terminal and run the following command.\nmkdir computing\nYou can change the current directory to that using:\ncd computing",
    "crumbs": [
      "Software Setup"
    ]
  },
  {
    "objectID": "setup.html#download-csketch-library",
    "href": "setup.html#download-csketch-library",
    "title": "Software Setup",
    "section": "",
    "text": "CSketch is a library for drawing simple shapes in C programming language and it is required for this course.\nRun the following command in your terminal to install it.\ncurl https://anandology.github.io/csketch/install.sh | bash\nThis will download the csketch library to your current directory and also adds a sample file circle.c and a Makefile to build your C code.",
    "crumbs": [
      "Software Setup"
    ]
  },
  {
    "objectID": "setup.html#build-your-first-program",
    "href": "setup.html#build-your-first-program",
    "title": "Software Setup",
    "section": "",
    "text": "Open your computing directory in vscode by running code . in your terminal.\n$ code .\nIf you are on Windows, you should run this in Ubuntu running in WSL. The WSL Extension of vscode would have made the code command available in your environment.\nOnce the vscode is open, open a terminal from the menu View -&gt; Terminal. You can also open the same using keyboard shortcut Ctrl + `.\n\n\n\nIn the terminal, run make to compile the circle.c file in the current directory.\n$ make\ngcc -I sketch -L sketch circle.c  -lm -l sketch -o circle\nThat compiled the circle.c and created executable file circle.\nRun the circle program.\n$ ./circle\nThat would have created a file circle.svg. Select the circle.svg file in the left sidebar to open it now press the preview button.\n\n\n\nOnce you click preview, you’ll be able to see the image in the right.",
    "crumbs": [
      "Software Setup"
    ]
  },
  {
    "objectID": "shell.html",
    "href": "shell.html",
    "title": "Introduction to Shell Programming",
    "section": "",
    "text": "hello-world\npermissions and #!\nnumerical expressions\nadd.sh\nloops\n\n\n\nA shell script is file that contains the list of commands that you want to run in a sequence.\nLet’s write a simple script.\n\n\nhello-world.sh\n\necho \"Hello, world!\"\n\nWe can run this as:\n$ bash hello-world.sh\nHello, world!\nTo run this script directly without invoking bash, we need do two things::\n\nFirst, we need to add a hash-bang directive in the first line of the script\nMake the script executable\n\nLet’s add the #! line.\n\n\nhello-world.sh\n\n#! /bin/bash\necho \"Hello, world!\"\n\nThe #! line is the unix way to tell the system that execute this script using bash.\nAfter adding that line, we still need to make the file executable. The file not executable unless we explicitly make it so. Let’s look at the output of ls -l.\n$ ls -l hello-world.sh\n-rw-rw-r-- 1 anand anand 34 Aug 19 09:07 hello-world.sh\nThe first column of the output indicates that the file has read, and write permissions.\nWe do add execute permissions by running chmod.\n$ chmod +x hello-world.sh\n\n$ ls -l hello-world.sh\n-rwxrwxr-x 1 anand anand 34 Aug 19 09:07 hello-world.sh\nNow the file is exutable. We can execute it using:\n$ ./hello-world.sh\nHello, world!\n\n\n\nIn shell scripts, # is the comment prefix. Everything after that character is considered a comment.\n\n\nhello-world.sh\n\n#! /bin/bash\n#\n# This program prints a hello world message\n#\n\necho \"Hello, world!\" # you can change the message here, if you wish\n\n# end of program\n\n\n\n\nVariables are placeholders to a value. Shell is weekly typed, so it doesn’t bother about datatypes like C.\nYou can define a variable just in a shell.\n$ fruit=Apple\nPlease note that the $ at the beginning of the line is just prompt of the shell. That is not something that you type.\n\n\n\n\n\n\nNote\n\n\n\nRemember that shell is very sensitive to spaces. You can set a variable only as name=value.\nIf you put spaces around =, it will complain. So name = value is invalid.\n$ x = 2\nx: command not found\nIn this case shell interprets it as invoking command with name x with two arguments = and 2. Just like what happens when we call echo hello world.\n\n\nTo use the value of a variable, we prefix the variable name with $.\n$ echo $fruit\nApple\n$ echo I like $fruit\nI like Apple\nWhen we want to use a variable in a sentence, we typically enclose it double quotes. We’ll learn more about quotes in a latter section.\n$ echo \"I like $fruit!\"\nI like Apple!\n\n\nThere are some variables already defined by the system. Variables like USER, HOME, SHELL, PATH etc. are usually defined for every session by the system.\n$ echo $USER\nanand\n$ echo $HOME\n/home/anand\n$ echo $SHELL\n/bin/bash\n$ echo $PATH\n/home/anand/.local/bin:/home/anand/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\nThe variable PATH is an interesting one. When you type a command, the system search for a file with that name in all the paths specified in the variable PATH. We’ll learn more about it later.\n\n\n\n\nShell has a shorthand for working with integer values. Put an expression in `$((..))``.\n$ x=3\n$ y=4\n$ echo \"$((x + y))\"\n7\n$ echo \"$((x * y))\"\n12\n$ echo \"$((x ** y))\"\n81\nPlease note that this is limited only to integers, doesn’t work with floating point numbers.\nIf you want to work with floating point numbers, use tools like bc or awk.\n\n\n\nThe command line arguments passed to a shell script are available in a special variable $*. You can use $# to find the number of arguments passed.\n\n\nargs.sh\n\n#! /bin/bash\necho \"You have given $# arguments\"\necho \"The arguments are $*\"\necho \"The first argument is $1\"\necho \"The second argument is $2\"\n\nLet’s make the script executable.\n$ chmod +x args.sh\n$ ls -l args.sh\n-rwxrwxr-x 1 anand anand 113 Aug 19 07:53 args.sh\nLet’s run it.\n$ ./args.sh hello world\nYou have given 2 arguments\nThe first argument is hello\nThe second argument is world\nIf you give less than 2 arguments $2 will be empty. Shell is weakly typed, so it doesn’t complain.\n$ ./args.sh hello\nYou have given 1 arguments\nThe first argument is hello\nThe second argument is\nNow lets write a shell script add-two-numbers.sh that takes two numbers as command line arguments and prints their sum.\n\n\nadd-two-numbers.sh\n\n#! /bin/bash\na=$1\nb=$2\necho $((a+b))\n\nLet’s make the script executable.\n$ chmod +x add-two-numbers.sh\nAnd run it.\n$ ./add-two-numbers.sh 3 4\n7\nProblem: Write a program square.sh that takes a number as command-line argument and prints its square.\n$ ./square.sh 5\n25\n\n\n\nThe read\n\n\nhello.sh\n\nread -p \"What is your name? \" name\n\necho \"Hello $name! Nice to meet you!!\"\n\n$ bash hello.sh\nWhat is your name? Anand\nHello Anand! Nice to meet you!!\n\n\n\nThere are three kinds of quotes used in shell scripts.\n\n\nSingle quotes preserve the literal value of the enclosed characters.\n$ echo 'You owe me $10 & an apple!'\nYou owe me $10 & an apple!\n\n\n\nDouble quotes preserves the literal value of the enclosed characters, but expands the variables and allows escape characters.\n$ echo \"hello $USER, how are you doing?\"\nhello anand, how are you doing?\n\n$ echo \"2 * 3 = $((2 * 3))\"\n2 * 3 = 6\nQuestion:\nWhat would the output of the following command? Can you explain why it produces a different result than what is shown in the example above?\necho 2 * 3 = $((2 * 3))\n\n\n\nShell allows putting a command in backquotes `...` and replaces it with the output of that command.\n$ echo \"The current date is `date`\"\nThe current date is Monday 19 August 2024 08:48:39 AM IST\nWe can also use $(...) instead of `...`.\n$ echo \"The current date is $(date)\"\nThe current date is Monday 19 August 2024 08:48:39 AM IST\nThe date command also supports custom formatting, we can use that to select that the day of the week.\n$ echo \"Today is a $(date +%A)\"\nToday is a Monday\nWe could also do the same thing using a variable.\n$ day=$(date +%A)\n$ echo \"Today is a $day\"\nToday is a Monday\n\n\n\n\nShell provides two kinds of loops, for loop and while loop.\n\n\n\n\nsquare-args.sh\n\n#! /bin/bash\n#\n# Program to compute square of all the numbers passed as command-line arguments\n#\nfor n in $*\ndo\n    echo $((n*n))\ndone\n\n$ bash square-args.sh 1 2 3 4\n1\n4\n9\n16\nWe can use wildcards to list file.\n$ for f in *.c; do figlet $f; done\n  ___(_)_ __ ___| | ___   ___\n / __| | '__/ __| |/ _ \\ / __|\n| (__| | | | (__| |  __/| (__\n \\___|_|_|  \\___|_|\\___(_)___|\n\n     _             _     _\n  __| | ___  _   _| |__ | | ___   ___\n / _` |/ _ \\| | | | '_ \\| |/ _ \\ / __|\n| (_| | (_) | |_| | |_) | |  __/| (__\n \\__,_|\\___/ \\__,_|_.__/|_|\\___(_)___|\nIf we want to loop over a sequence of numbers, we could make use of the seq command.\n$ for n in `seq 5`; do echo \"$((n*n))\"; done\n1\n4\n9\n16\n25\n\n\n\n\nThe while loop is used with a condition and it continues to run until the condition is false. It is very handly to read data from stdin or a file.\n\n\nsquares.sh\n\n#! /bin/bash\n\n# read each line in the input input variable `n`\nwhile read n\ndo\n    echo $((n*n))\ndone\n\n$ chmod +x squares.sh\n$ seq 5 | ./squares.sh\n1\n4\n9\n16\n25\nProblem: Write a program sum.sh to read numbers from stdin and print their sum.\n$ seq 5 | ./sum.sh\n15\n$ seq 5 | ./squares.sh | ./sum.sh\n55\n\n\n\n\n\n\n\n\n$*\n\nAll Arguments\n\n$#\n\nThe numner of arguments\n\n$0\n\nThe program name\n\n$1, $2, $3, …\n\nIndividual arguments",
    "crumbs": [
      "Introduction to Shell Programming"
    ]
  },
  {
    "objectID": "shell.html#introduction",
    "href": "shell.html#introduction",
    "title": "Introduction to Shell Programming",
    "section": "",
    "text": "A shell script is file that contains the list of commands that you want to run in a sequence.\nLet’s write a simple script.\n\n\nhello-world.sh\n\necho \"Hello, world!\"\n\nWe can run this as:\n$ bash hello-world.sh\nHello, world!\nTo run this script directly without invoking bash, we need do two things::\n\nFirst, we need to add a hash-bang directive in the first line of the script\nMake the script executable\n\nLet’s add the #! line.\n\n\nhello-world.sh\n\n#! /bin/bash\necho \"Hello, world!\"\n\nThe #! line is the unix way to tell the system that execute this script using bash.\nAfter adding that line, we still need to make the file executable. The file not executable unless we explicitly make it so. Let’s look at the output of ls -l.\n$ ls -l hello-world.sh\n-rw-rw-r-- 1 anand anand 34 Aug 19 09:07 hello-world.sh\nThe first column of the output indicates that the file has read, and write permissions.\nWe do add execute permissions by running chmod.\n$ chmod +x hello-world.sh\n\n$ ls -l hello-world.sh\n-rwxrwxr-x 1 anand anand 34 Aug 19 09:07 hello-world.sh\nNow the file is exutable. We can execute it using:\n$ ./hello-world.sh\nHello, world!",
    "crumbs": [
      "Introduction to Shell Programming"
    ]
  },
  {
    "objectID": "shell.html#comments",
    "href": "shell.html#comments",
    "title": "Introduction to Shell Programming",
    "section": "",
    "text": "In shell scripts, # is the comment prefix. Everything after that character is considered a comment.\n\n\nhello-world.sh\n\n#! /bin/bash\n#\n# This program prints a hello world message\n#\n\necho \"Hello, world!\" # you can change the message here, if you wish\n\n# end of program",
    "crumbs": [
      "Introduction to Shell Programming"
    ]
  },
  {
    "objectID": "shell.html#variables",
    "href": "shell.html#variables",
    "title": "Introduction to Shell Programming",
    "section": "",
    "text": "Variables are placeholders to a value. Shell is weekly typed, so it doesn’t bother about datatypes like C.\nYou can define a variable just in a shell.\n$ fruit=Apple\nPlease note that the $ at the beginning of the line is just prompt of the shell. That is not something that you type.\n\n\n\n\n\n\nNote\n\n\n\nRemember that shell is very sensitive to spaces. You can set a variable only as name=value.\nIf you put spaces around =, it will complain. So name = value is invalid.\n$ x = 2\nx: command not found\nIn this case shell interprets it as invoking command with name x with two arguments = and 2. Just like what happens when we call echo hello world.\n\n\nTo use the value of a variable, we prefix the variable name with $.\n$ echo $fruit\nApple\n$ echo I like $fruit\nI like Apple\nWhen we want to use a variable in a sentence, we typically enclose it double quotes. We’ll learn more about quotes in a latter section.\n$ echo \"I like $fruit!\"\nI like Apple!\n\n\nThere are some variables already defined by the system. Variables like USER, HOME, SHELL, PATH etc. are usually defined for every session by the system.\n$ echo $USER\nanand\n$ echo $HOME\n/home/anand\n$ echo $SHELL\n/bin/bash\n$ echo $PATH\n/home/anand/.local/bin:/home/anand/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\nThe variable PATH is an interesting one. When you type a command, the system search for a file with that name in all the paths specified in the variable PATH. We’ll learn more about it later.",
    "crumbs": [
      "Introduction to Shell Programming"
    ]
  },
  {
    "objectID": "shell.html#integer-expressions",
    "href": "shell.html#integer-expressions",
    "title": "Introduction to Shell Programming",
    "section": "",
    "text": "Shell has a shorthand for working with integer values. Put an expression in `$((..))``.\n$ x=3\n$ y=4\n$ echo \"$((x + y))\"\n7\n$ echo \"$((x * y))\"\n12\n$ echo \"$((x ** y))\"\n81\nPlease note that this is limited only to integers, doesn’t work with floating point numbers.\nIf you want to work with floating point numbers, use tools like bc or awk.",
    "crumbs": [
      "Introduction to Shell Programming"
    ]
  },
  {
    "objectID": "shell.html#arguments",
    "href": "shell.html#arguments",
    "title": "Introduction to Shell Programming",
    "section": "",
    "text": "The command line arguments passed to a shell script are available in a special variable $*. You can use $# to find the number of arguments passed.\n\n\nargs.sh\n\n#! /bin/bash\necho \"You have given $# arguments\"\necho \"The arguments are $*\"\necho \"The first argument is $1\"\necho \"The second argument is $2\"\n\nLet’s make the script executable.\n$ chmod +x args.sh\n$ ls -l args.sh\n-rwxrwxr-x 1 anand anand 113 Aug 19 07:53 args.sh\nLet’s run it.\n$ ./args.sh hello world\nYou have given 2 arguments\nThe first argument is hello\nThe second argument is world\nIf you give less than 2 arguments $2 will be empty. Shell is weakly typed, so it doesn’t complain.\n$ ./args.sh hello\nYou have given 1 arguments\nThe first argument is hello\nThe second argument is\nNow lets write a shell script add-two-numbers.sh that takes two numbers as command line arguments and prints their sum.\n\n\nadd-two-numbers.sh\n\n#! /bin/bash\na=$1\nb=$2\necho $((a+b))\n\nLet’s make the script executable.\n$ chmod +x add-two-numbers.sh\nAnd run it.\n$ ./add-two-numbers.sh 3 4\n7\nProblem: Write a program square.sh that takes a number as command-line argument and prints its square.\n$ ./square.sh 5\n25",
    "crumbs": [
      "Introduction to Shell Programming"
    ]
  },
  {
    "objectID": "shell.html#reading-input",
    "href": "shell.html#reading-input",
    "title": "Introduction to Shell Programming",
    "section": "",
    "text": "The read\n\n\nhello.sh\n\nread -p \"What is your name? \" name\n\necho \"Hello $name! Nice to meet you!!\"\n\n$ bash hello.sh\nWhat is your name? Anand\nHello Anand! Nice to meet you!!",
    "crumbs": [
      "Introduction to Shell Programming"
    ]
  },
  {
    "objectID": "shell.html#quotes",
    "href": "shell.html#quotes",
    "title": "Introduction to Shell Programming",
    "section": "",
    "text": "There are three kinds of quotes used in shell scripts.\n\n\nSingle quotes preserve the literal value of the enclosed characters.\n$ echo 'You owe me $10 & an apple!'\nYou owe me $10 & an apple!\n\n\n\nDouble quotes preserves the literal value of the enclosed characters, but expands the variables and allows escape characters.\n$ echo \"hello $USER, how are you doing?\"\nhello anand, how are you doing?\n\n$ echo \"2 * 3 = $((2 * 3))\"\n2 * 3 = 6\nQuestion:\nWhat would the output of the following command? Can you explain why it produces a different result than what is shown in the example above?\necho 2 * 3 = $((2 * 3))\n\n\n\nShell allows putting a command in backquotes `...` and replaces it with the output of that command.\n$ echo \"The current date is `date`\"\nThe current date is Monday 19 August 2024 08:48:39 AM IST\nWe can also use $(...) instead of `...`.\n$ echo \"The current date is $(date)\"\nThe current date is Monday 19 August 2024 08:48:39 AM IST\nThe date command also supports custom formatting, we can use that to select that the day of the week.\n$ echo \"Today is a $(date +%A)\"\nToday is a Monday\nWe could also do the same thing using a variable.\n$ day=$(date +%A)\n$ echo \"Today is a $day\"\nToday is a Monday",
    "crumbs": [
      "Introduction to Shell Programming"
    ]
  },
  {
    "objectID": "shell.html#loops",
    "href": "shell.html#loops",
    "title": "Introduction to Shell Programming",
    "section": "",
    "text": "Shell provides two kinds of loops, for loop and while loop.\n\n\n\n\nsquare-args.sh\n\n#! /bin/bash\n#\n# Program to compute square of all the numbers passed as command-line arguments\n#\nfor n in $*\ndo\n    echo $((n*n))\ndone\n\n$ bash square-args.sh 1 2 3 4\n1\n4\n9\n16\nWe can use wildcards to list file.\n$ for f in *.c; do figlet $f; done\n  ___(_)_ __ ___| | ___   ___\n / __| | '__/ __| |/ _ \\ / __|\n| (__| | | | (__| |  __/| (__\n \\___|_|_|  \\___|_|\\___(_)___|\n\n     _             _     _\n  __| | ___  _   _| |__ | | ___   ___\n / _` |/ _ \\| | | | '_ \\| |/ _ \\ / __|\n| (_| | (_) | |_| | |_) | |  __/| (__\n \\__,_|\\___/ \\__,_|_.__/|_|\\___(_)___|\nIf we want to loop over a sequence of numbers, we could make use of the seq command.\n$ for n in `seq 5`; do echo \"$((n*n))\"; done\n1\n4\n9\n16\n25",
    "crumbs": [
      "Introduction to Shell Programming"
    ]
  },
  {
    "objectID": "shell.html#the-while-loop",
    "href": "shell.html#the-while-loop",
    "title": "Introduction to Shell Programming",
    "section": "",
    "text": "The while loop is used with a condition and it continues to run until the condition is false. It is very handly to read data from stdin or a file.\n\n\nsquares.sh\n\n#! /bin/bash\n\n# read each line in the input input variable `n`\nwhile read n\ndo\n    echo $((n*n))\ndone\n\n$ chmod +x squares.sh\n$ seq 5 | ./squares.sh\n1\n4\n9\n16\n25\nProblem: Write a program sum.sh to read numbers from stdin and print their sum.\n$ seq 5 | ./sum.sh\n15\n$ seq 5 | ./squares.sh | ./sum.sh\n55",
    "crumbs": [
      "Introduction to Shell Programming"
    ]
  },
  {
    "objectID": "shell.html#summary",
    "href": "shell.html#summary",
    "title": "Introduction to Shell Programming",
    "section": "",
    "text": "$*\n\nAll Arguments\n\n$#\n\nThe numner of arguments\n\n$0\n\nThe program name\n\n$1, $2, $3, …\n\nIndividual arguments",
    "crumbs": [
      "Introduction to Shell Programming"
    ]
  },
  {
    "objectID": "lecture-notes/2024-08-12/index.html",
    "href": "lecture-notes/2024-08-12/index.html",
    "title": "Lecture Notes - Mon Aug 12, 2024",
    "section": "",
    "text": "Please see lesson Introduction to Unix Command Line.",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes - Mon Aug 12, 2024"
    ]
  },
  {
    "objectID": "lecture-notes/2024-08-12/index.html#quick-setup",
    "href": "lecture-notes/2024-08-12/index.html#quick-setup",
    "title": "Lecture Notes - Mon Aug 12, 2024",
    "section": "Quick Setup",
    "text": "Quick Setup\nPlease install the required packages to install the commands used in this session.\n$ sudo apt-get -y install coreutils figlet cowsay wbritish",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes - Mon Aug 12, 2024"
    ]
  },
  {
    "objectID": "lecture-notes/2024-08-12/index.html#the-log",
    "href": "lecture-notes/2024-08-12/index.html#the-log",
    "title": "Lecture Notes - Mon Aug 12, 2024",
    "section": "The log",
    "text": "The log\nHere is the log of all the commands tried in the class.\nLet’s start with printing a hello world message.\n$ echo hello world\nhello world\nThe echo command takes one or more command-line arguments and prints all of them as output. In this case echo is the name of the program and hello and world are two arguments passed to it.\nWe could try the date command to find the current date and time.\n$ date\nMonday 12 August 2024 11:33:05 AM IST\n$ date\nMonday 12 August 2024 11:33:07 AM IST\nNow, let’s try something fun!\n$ figlet hello world\n _          _ _                            _     _\n| |__   ___| | | ___   __      _____  _ __| | __| |\n| '_ \\ / _ \\ | |/ _ \\  \\ \\ /\\ / / _ \\| '__| |/ _` |\n| | | |  __/ | | (_) |  \\ V  V / (_) | |  | | (_| |\n|_| |_|\\___|_|_|\\___/    \\_/\\_/ \\___/|_|  |_|\\__,_|\nFiglet is a program that prints the given text as large characters made up of ordinary screen characters.\nPlease try figlet with some other arguments and see what happens.\nAlso note that if you are using figlet with any special characters, make sure you enclose the arguments pased to figlet in single quotes. If you don’t do that then shell may interpret them differently and do some weird things.\nFor example, if you call figlet with a * b as argument:\n$ figlet a * b\n\n              _          _             _          _\n  __ _    ___(_)_ __ ___| | ___    ___(_)_ __ ___| | ___   ___\n / _` |  / __| | '__/ __| |/ _ \\  / __| | '__/ __| |/ _ \\ / __|\n| (_| | | (__| | | | (__| |  __/ | (__| | | | (__| |  __/| (__\n \\__,_|  \\___|_|_|  \\___|_|\\___|  \\___|_|_|  \\___|_|\\___(_)___|\n\n      _          _\n  ___(_)_ __ ___| | ___   _____   ____ _\n / __| | '__/ __| |/ _ \\ / __\\ \\ / / _` |\n| (__| | | | (__| |  __/_\\__ \\\\ V / (_| |\n \\___|_|_|  \\___|_|\\___(_)___/ \\_/ \\__, |\n                                   |___/\n\n __  __       _         __ _ _\n|  \\/  | __ _| | _____ / _(_) | ___\n| |\\/| |/ _` | |/ / _ \\ |_| | |/ _ \\\n| |  | | (_| |   &lt;  __/  _| | |  __/\n|_|  |_|\\__,_|_|\\_\\___|_| |_|_|\\___|\n\n                      _                        _          _\n             _        _       _       _\n ___| | _____| |_ ___| |__   | |__\n/ __| |/ / _ \\ __/ __| '_ \\  | '_ \\\n\\__ \\   &lt;  __/ || (__| | | | | |_) |\n|___/_|\\_\\___|\\__\\___|_| |_| |_.__/\n                                                          _\nThe special character * means all the files in the current directory. You can verify that by running echo *.\n$ echo *\ncircle circle.c circle.svg Makefile sketch\nWe can enclose the arguments in single quotes to ignore the special characters.\n$ figlet 'a * b'\n                _\n  __ _  __/\\__ | |__\n / _` | \\    / | '_ \\\n| (_| | /_  _\\ | |_) |\n \\__,_|   \\/   |_.__/\nNow, let’s try a new command seq. The seq command takes a number n as argument and prints all numbers from 1 to n.\n$ seq 5\n1\n2\n3\n4\n5\nHow do we combine the seq and figlet program together so that the output of seq is passed as input to figlet? We just use the | character.\n$ seq 5 | figlet\n _\n/ |\n| |\n| |\n|_|\n\n ____\n|___ \\\n  __) |\n / __/\n|_____|\n\n _____\n|___ /\n  |_ \\\n ___) |\n|____/\n\n _  _\n| || |\n| || |_\n|__   _|\n   |_|\n\n ____\n| ___|\n|___ \\\n ___) |\n|____/\nThere is another interesting program called cowsay. It is usually not in the PATH (more about this later) so we need to give the full path for it to work. It is at path /usr/games/cowsay.\n$ /usr/games/cowsay hello world\n _____________\n&lt; hello world &gt;\n -------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\nWe could use a different animal by specifing the cowfile using option -f.\n$ /usr/games/cowsay -f tux hello world\n _____________\n&lt; hello world &gt;\n -------------\n   \\\n    \\\n        .--.\n       |o_o |\n       |:_/ |\n      //   \\ \\\n     (|     | )\n    /'\\_   _/`\\\n    \\___)=(___/\n$ seq 5 | /usr/games/cowsay\n ___________\n&lt; 1 2 3 4 5 &gt;\n -----------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n$ seq 5 | /usr/games/cowsay -n\n ___\n/ 1 \\\n| 2 |\n| 3 |\n| 4 |\n\\ 5 /\n ---\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n$ seq 2 | figlet | /usr/games/cowsay -n\n _________\n/  _      \\\n| / |     |\n| | |     |\n| | |     |\n| |_|     |\n|         |\n|  ____   |\n| |___ \\  |\n|   __) | |\n|  / __/  |\n| |_____| |\n\\         /\n ---------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n$ echo hello | figlet | /usr/games/cowsay -n\n ________________________\n/  _          _ _        \\\n| | |__   ___| | | ___   |\n| | '_ \\ / _ \\ | |/ _ \\  |\n| | | | |  __/ | | (_) | |\n| |_| |_|\\___|_|_|\\___/  |\n\\                        /\n ------------------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n$\n$ figlet hello\n _          _ _\n| |__   ___| | | ___\n| '_ \\ / _ \\ | |/ _ \\\n| | | |  __/ | | (_) |\n|_| |_|\\___|_|_|\\___/\n\n$ figlet\nhello\n _          _ _\n| |__   ___| | | ___\n| '_ \\ / _ \\ | |/ _ \\\n| | | |  __/ | | (_) |\n|_| |_|\\___|_|_|\\___/\n\nworld\n                    _     _\n__      _____  _ __| | __| |\n\\ \\ /\\ / / _ \\| '__| |/ _` |\n \\ V  V / (_) | |  | | (_| |\n  \\_/\\_/ \\___/|_|  |_|\\__,_|\n\n$ /usr/games/cowsay -n\nhello\nworld\n _______\n/ hello \\\n\\ world /\n -------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n$\n$ figlet hello\n _          _ _\n| |__   ___| | | ___\n| '_ \\ / _ \\ | |/ _ \\\n| | | |  __/ | | (_) |\n|_| |_|\\___|_|_|\\___/\n\n$ figlet -f slant hello\n    __         ____\n   / /_  ___  / / /___\n  / __ \\/ _ \\/ / / __ \\\n / / / /  __/ / / /_/ /\n/_/ /_/\\___/_/_/\\____/\n\n$ figlet -f lean hello\n\n    _/                  _/  _/\n   _/_/_/      _/_/    _/  _/    _/_/\n  _/    _/  _/_/_/_/  _/  _/  _/    _/\n _/    _/  _/        _/  _/  _/    _/\n_/    _/    _/_/_/  _/  _/    _/_/\n\n\n$ pwd\n/home/anand/github/anandology/isi-fcp/computing\n$ cd\n$ pwd\n/home/anand\n$ cd /home/anand/github/anandology/isi-fcp/computing\n$\n$ ls\ncircle      Makefile          moving-circle.c    sketch\ncircle.c    moving-circle     moving-circle.mp4\ncircle.svg  moving-circle2    moving-circle.svg\nframes      moving-circle2.c  numbers.sh\n$ cat numbers.sh\nn=$1\nseq $n | figlet$\n$\n$ cat numbers.sh\nn=$1\nseq $n | figlet\n$ cat\nhello\nhello\n$ ls -l\ntotal 168\n-rwxrwxr-x 1 anand anand 16976 Jul 30 21:54 circle\n-rw-rw-r-- 1 anand anand   196 Jul 29 00:16 circle.c\n-rw-rw-r-- 1 anand anand  6682 Aug  5 10:55 circle.svg\ndrwxrwxr-x 2 anand anand 32768 Aug  6 17:51 frames\n-rw-rw-r-- 1 anand anand   575 Aug  6 17:46 Makefile\n-rwxrwxr-x 1 anand anand 17152 Aug  6 17:50 moving-circle\n-rwxrwxr-x 1 anand anand 17024 Aug  6 17:32 moving-circle2\n-rw-rw-r-- 1 anand anand   433 Aug  6 17:32 moving-circle2.c\n-rw-rw-r-- 1 anand anand  1034 Aug  6 18:11 moving-circle.c\n-rw-rw-r-- 1 anand anand 40176 Aug  6 17:52 moving-circle.mp4\n-rw-rw-r-- 1 anand anand   359 Aug  6 17:36 moving-circle.svg\n-rw-rw-r-- 1 anand anand    21 Aug 12 12:07 numbers.sh\nlrwxrwxrwx 1 anand anand     9 Aug  5 10:55 sketch -&gt; ../sketch\n$ whoami\nanand\n$\n$ figlet sketch\n     _        _       _\n ___| | _____| |_ ___| |__\n/ __| |/ / _ \\ __/ __| '_ \\\n\\__ \\   &lt;  __/ || (__| | | |\n|___/_|\\_\\___|\\__\\___|_| |_|\n\n$ figlet -f slant sketch\n        __        __       __\n   _____/ /_____  / /______/ /_\n  / ___/ //_/ _ \\/ __/ ___/ __ \\\n (__  ) ,&lt; /  __/ /_/ /__/ / / /\n/____/_/|_|\\___/\\__/\\___/_/ /_/\n\n$ figlet -f slant sketch &gt; sketch.txt\n$ pwd\n/home/anand/github/anandology/isi-fcp/computing\n$ ls\ncircle      Makefile          moving-circle.c    sketch\ncircle.c    moving-circle     moving-circle.mp4  sketch.txt\ncircle.svg  moving-circle2    moving-circle.svg\nframes      moving-circle2.c  numbers.sh\n$ cat sketch.txt\n         __        __       __\n   _____/ /_____  / /______/ /_\n  / ___/ //_/ _ \\/ __/ ___/ __ \\\n (__  ) ,&lt; /  __/ /_/ /__/ / / /\n/____/_/|_|\\___/\\__/\\___/_/ /_/\n\n$ seq\n$ seq 1000000 &gt; 1m.txt\n$ ls -l *.txt\n-rw-rw-r-- 1 anand anand 6888896 Aug 12 12:15 1m.txt\n-rw-rw-r-- 1 anand anand     198 Aug 12 12:12 sketch.txt\n$ wc -l 1m.txt\n1000000 1m.txt\n\n$ cat sketch.txt\n         __        __       __\n   _____/ /_____  / /______/ /_\n  / ___/ //_/ _ \\/ __/ ___/ __ \\\n (__  ) ,&lt; /  __/ /_/ /__/ / / /\n/____/_/|_|\\___/\\__/\\___/_/ /_/\n\n$ /usr/games/cowsay -n &lt; sketch.txt\n __________________________________\n/          __        __       __   \\\n|    _____/ /_____  / /______/ /_  |\n|   / ___/ //_/ _ \\/ __/ ___/ __ \\ |\n|  (__  ) ,&lt; /  __/ /_/ /__/ / / / |\n| /____/_/|_|\\___/\\__/\\___/_/ /_/  |\n\\                                  /\n ----------------------------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n$ cat numbers.sh\nn=$1\nseq $n | figlet\n$ /usr/games/cowsay -n &lt; numbers.sh\n _________________\n/ n=$1            \\\n\\ seq $n | figlet /\n -----------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n$\n$ seq 2000 | tail -5\n1996\n1997\n1998\n1999\n2000\n$ echo 1234567 | sed 's/\\(...\\)+/\\1,/'\n1234567\n$ echo 1234567 | sed 's/\\(...\\)+/g\\1,/'\n1234567\n$ echo 1234567 | sed 's/\\(...\\)/g\\1,/'\ng123,4567\n$ echo 1234567 | sed 's/\\(...\\)/\\1,/'\n123,4567\n$ echo 1234567 | sed 's/\\(...\\)/\\1,/g'\n123,456,7\n$ echo 1234567 | sed 's/.*\\(...\\)/\\1,/g'\n567,\n$ echo 1234567 | sed 's/\\(...\\)+/\\1,/g'\n1234567\n$ sudo apt-get -y install wbritish\n[sudo] password for anand:\nSorry, try again.\n[sudo] password for anand:\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nwbritish is already the newest version (2020.12.07-2).\n0 upgraded, 0 newly installed, 0 to remove and 706 not upgraded.\n$\n$ ls\n1m.txt      frames          moving-circle2.c   numbers.sh\ncircle      Makefile        moving-circle.c    sketch\ncircle.c    moving-circle   moving-circle.mp4  sketch.txt\ncircle.svg  moving-circle2  moving-circle.svg\n$\n\n$ cat moving-circle.c\n#include &lt;sketch.h&gt;\n#include &lt;unistd.h&gt;\n\nint frame_count = 0;\n\n// saves each frame as file frames/0000.svg, frames/0001.svg etc.\nvoid save_frame()\n{\n    char filename[100];\n\n    // format the file name and save it into the variable filename\n    sprintf(filename, \"frames/%04d.svg\", frame_count);\n\n    // save the sketch into the frame filename\n    save_sketch(filename);\n\n    // increment the frame count, so that the next call to this function\n    // will write to a different file\n    frame_count++;\n\n    printf(\"saved %s\\n\", filename);\n}\n\nint main()\n{\n    float r = 50;\n    float y = 0;\n    float x = -300 + r;\n\n    while (x &lt; 300)\n    {\n        // clear everything that is drawn so far\n        clear_sketch();\n\n        // draw one circle\n        draw_circle(x, y, r);\n\n        // save the sketch\n        // since we are doing this in a loop, the svg extension of vscode will\n        // update the image everytime the file is updated.\n        save_frame();\n\n        // move the circle by 10 pixels to the right\n        x++;\n    }\n}\n\n$ grep draw moving-circle.c\n        // clear everything that is drawn so far\n        // draw one circle\n        draw_circle(x, y, r);\n$ grep draw_ moving-circle.c\n        draw_circle(x, y, r);\n$ seq 1000000 | grep 5 | wc -l\n468559\n$ seq 1000000 | grep '5.*5' | head\n55\n155\n255\n355\n455\n505\n515\n525\n535\n545\n$ seq 1000000 | grep '5.*5' | wc -l\n114265",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes - Mon Aug 12, 2024"
    ]
  },
  {
    "objectID": "lecture-notes/2024-08-12/index.html#solving-wordle-with-command-line",
    "href": "lecture-notes/2024-08-12/index.html#solving-wordle-with-command-line",
    "title": "Lecture Notes - Mon Aug 12, 2024",
    "section": "Solving Wordle with command-line",
    "text": "Solving Wordle with command-line\nWordle is a word game where you guess a word.\nWe are going to try solving it using unix command-line tools. For this we are going to use the command grep to match lines in a file that match given Regular Expression pattern.\nThe file /usr/share/dict/words contains all the words in the dictionary, one in each line.\n\n\n\n\n\n\nNote\n\n\n\nIf you don’t find that file, it means you don’t have a dictionary installed. Install it by running:\n$ sudo apt-get -y install wbritish\n\n\n$ wc -l /usr/share/dict/words\n104334 /usr/share/dict/words\nLet’s try to find all words that start with a prefix, say ice.\n$ grep '^ice' /usr/share/dict/words\nice\niceberg\niceberg's\nicebergs\nicebound\nicebox\niceboxes\nicebox's\nicebreaker\nicebreaker's\nicebreakers\nicecap\nicecap's\nicecaps\niced\nice's\nices\nLet’s find all the 5 letter words in the dictionary.\n$ grep '^.....$' /usr/share/dict/words | head\nABC's\nABM's\nAFAIK\nAFC's\nAMD's\nANSIs\nANZUS\nAOL's\nASCII\nASL's\n$ grep '^.....$' /usr/share/dict/words | wc -l\n7044\nThere are quite many of them. Let’s start with a guess. What shall we start with? Ok, FLAME!\n\n\n\nHow many 5-letter words are there that have letter f in them?\n$ grep '^.....$' /usr/share/dict/words | grep f | wc -l\n469\nThe letter L, A, M and E are not present in our word. Let’s try to skip all the words that have any of these characters.\n$ grep '^.....$' /usr/share/dict/words | grep f | grep -v '[lame]' | wc -l\n123\nThat is still quite a lof of them. Lets see some of those options.\n$ grep '^.....$' /usr/share/dict/words | grep f | grep -v '[lame]' | head\nAcuff\nAfros\nBuffy\nCorfu\nDuffy\nKhufu\nKnopf\nRufus\nSwift\nbiffs\nI’m going to try one of them. I’ll go with Swift.\n\n\n\nNow that we know correct letters in three positions and 6 letters that are not present, let’s see what all words are available.\n$ grep '^s.if.$' /usr/share/dict/words |  grep -v '[lamewt]' | head\nskiff\nsniff\n$ grep '^s.if.$' /usr/share/dict/words |  grep -v '[lamewt]'\nskiff\nsniff\nLet’s try with the first one skiff.\n\n\n\nYay! We solved Worle with command-line!",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes - Mon Aug 12, 2024"
    ]
  },
  {
    "objectID": "lecture-notes/02/index.html",
    "href": "lecture-notes/02/index.html",
    "title": "Lecture Notes 02",
    "section": "",
    "text": "Warning\n\n\n\nThis lecture notes is still work in progress. Not all programs covered in the class are added here yet. The remaining ones will be added soon!",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes 02"
    ]
  },
  {
    "objectID": "lecture-notes/02/index.html#introduction",
    "href": "lecture-notes/02/index.html#introduction",
    "title": "Lecture Notes 02",
    "section": "Introduction",
    "text": "Introduction\nWhy should you learn programming?\n\nA powerful programming language is more than just a means for instructing a computer to perform tasks. The language also serves as a framework within which we organize our ideas about processes.\n\n– Structure and Interpretation of Computer Programs\n\nEvery powerful language has three mechanisms for accomplishing this:\n\nprimitive expressions, which represent the simplest entities the language is concerned with,\nmeans of combination, by which compound elements are built from simpler ones, and\nmeans of abstraction, by which compound elements can be named and manipulated as units.\n\n\n– Structure and Interpretation of Computer Programs",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes 02"
    ]
  },
  {
    "objectID": "lecture-notes/02/index.html#diving-in",
    "href": "lecture-notes/02/index.html#diving-in",
    "title": "Lecture Notes 02",
    "section": "Diving in",
    "text": "Diving in\n\nA Circle\n#include &lt;sketch.h&gt;\n\nint main()\n{\n    // draw a circle with center as (0, 0) and radius 100\n    draw_circle(0, 0, 100);\n\n    // save all the shapes draws to lesson2.svg\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\n\nTwo Circles\nHow do we draw two circles instead of just one?\n#include &lt;sketch.h&gt;\n\nint main()\n{\n    draw_circle(-100, 0, 100);\n    draw_circle(100, 0, 100);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\n\nConcentric Circles\nHow about drawing two concentic circles?\n#include &lt;sketch.h&gt;\n\nint main()\n{\n    draw_circle(0, 0, 200);\n    draw_circle(0, 0, 100);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\nWhat if we want three circles?\n#include &lt;sketch.h&gt;\n\nint main()\n{\n    float r = 150;\n\n    draw_circle(0, 0, r / 3);\n    draw_circle(0, 0, 2 * r / 3);\n    draw_circle(0, 0, r);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\n\nCandle Lights\n#include &lt;sketch.h&gt;\n\nvoid bottle_circle(float bx, float by, float r)\n{\n    float cx = bx;\n    float cy = by + r;\n\n    draw_circle(cx, cy, r);\n}\n\nvoid draw_candle_light(float x, float y, float r)\n{\n    bottle_circle(x, y, r / 3);\n    bottle_circle(x, y, 2 * r / 3);\n    bottle_circle(x, y, r);\n}\n\nint main()\n{\n    draw_candle_light(-100, 0, 100);\n    draw_candle_light(100, 0, 100);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\n\nConcentric Circles\n#include &lt;sketch.h&gt;\n\nvoid concentric_circles(float x, float y, float r, float n)\n{\n    for (int i = 1; i &lt;= n; i++)\n    {\n        draw_circle(x, y, i * r / n);\n    }\n}\n\nint main()\n{\n    concentric_circles(0, 0, 250, 10);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\n\nRandom Concentric Circles\n#include &lt;sketch.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\n\nvoid random_concentric_circles(float x, float y, int r, float n)\n{\n    for (int i = 1; i &lt;= n; i++)\n    {\n        // pick a random number from 1 to r\n        float r1 = 1 + rand() % r;\n\n        draw_circle(x, y, r1);\n    }\n}\n\nint main()\n{\n    // initialize the random number generator\n    srand(time(NULL));\n\n    random_concentric_circles(0, 0, 250, 10);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\nTry running this program again and you’ll get completely different circles!",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes 02"
    ]
  },
  {
    "objectID": "lecture-notes/02/index.html#string-art",
    "href": "lecture-notes/02/index.html#string-art",
    "title": "Lecture Notes 02",
    "section": "String Art",
    "text": "String Art\nLet’s add a bit more complexity. How do you find N points equidistant on a circle?\nYes, trigonometry!\n#include &lt;sketch.h&gt;\n#include &lt;math.h&gt;\n#include &lt;time.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define N 36\n\nfloat X[N];\nfloat Y[N];\n\n// initialze the X and Y for N points\n// on circle of radius r\nvoid make_circle(float r)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        float theta = 2 * M_PI / N * i;\n        X[i] = r * cos(theta);\n        Y[i] = r * sin(theta);\n        draw_circle(X[i], Y[i], 2);\n    }\n}\n\nint main()\n{\n    make_circle(250);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\nConnecting Points\nWhat if we connect some points?\n#include &lt;sketch.h&gt;\n#include &lt;math.h&gt;\n\n#define N 36\n\nfloat X[N];\nfloat Y[N];\n\n// initialze the X and Y for N points\n// on circle of radius r\nvoid make_circle(float r)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        float theta = 2 * M_PI / N * i;\n        X[i] = r * cos(theta);\n        Y[i] = r * sin(theta);\n        draw_circle(X[i], Y[i], 2);\n    }\n}\n\nvoid connect(int i, int j)\n{\n    i = i % N;\n    j = j % N;\n    draw_line(X[i], Y[i], X[j], Y[j]);\n}\n\nint main()\n{\n    make_circle(250);\n\n    connect(0, 4);\n    connect(1, 5);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\n\nConnecting All Points\nLet’s go one step further and connect all the points.\n#include &lt;sketch.h&gt;\n#include &lt;math.h&gt;\n\n#define N 36\n\nfloat X[N];\nfloat Y[N];\n\n// initialze the X and Y for N points\n// on circle of radius r\nvoid make_circle(float r)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        float theta = 2 * M_PI / N * i;\n        X[i] = r * cos(theta);\n        Y[i] = r * sin(theta);\n        draw_circle(X[i], Y[i], 2);\n    }\n}\n\nvoid connect(int i, int j)\n{\n    i = i % N;\n    j = j % N;\n    draw_line(X[i], Y[i], X[j], Y[j]);\n}\n\nvoid connect_all(int delta)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        connect(i, i + delta);\n    }\n}\n\nint main()\n{\n    make_circle(250);\n\n    connect_all(10);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\n\nA Pattern\nWe could use connect_all multiple times to generate very interesting pattern.\n#include &lt;sketch.h&gt;\n#include &lt;math.h&gt;\n\n#define N 36\n\nfloat X[N];\nfloat Y[N];\n\n// initialze the X and Y for N points\n// on circle of radius r\nvoid make_circle(float r)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        float theta = 2 * M_PI / N * i;\n        X[i] = r * cos(theta);\n        Y[i] = r * sin(theta);\n        // draw_circle(X[i], Y[i], 2);\n    }\n}\n\nvoid connect(int i, int j)\n{\n    i = i % N;\n    j = j % N;\n    draw_line(X[i], Y[i], X[j], Y[j]);\n}\n\nvoid connect_all(int delta)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        connect(i, i + delta);\n    }\n}\n\nint main()\n{\n    make_circle(250);\n\n    connect_all(16);\n    connect_all(12);\n    connect_all(7);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\n\nCardoid\n#include &lt;sketch.h&gt;\n#include &lt;math.h&gt;\n#include &lt;time.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define N 72\n\nfloat X[N];\nfloat Y[N];\n\n// initialze the X and Y for N points\n// on circle of radius r\nvoid make_circle(float r)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        float theta = 2 * M_PI / N * i;\n        X[i] = r * cos(theta);\n        Y[i] = r * sin(theta);\n        // draw_circle(X[i], Y[i], 2);\n    }\n}\n\nvoid connect(int i, int j)\n{\n    i = i % N;\n    j = j % N;\n    draw_line(X[i], Y[i], X[j], Y[j]);\n}\n\nvoid connect_all(int delta)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        connect(i, i + delta);\n    }\n}\n\nint main()\n{\n    // initialize the random number generator\n    srand(time(NULL));\n\n    make_circle(250);\n\n    for (int i = 0; i &lt; N; i++)\n    {\n        connect(i, 2 * i);\n    }\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\n\nFinal Touch\n#include &lt;sketch.h&gt;\n#include &lt;math.h&gt;\n#include &lt;time.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define N 720\n\nfloat X[N];\nfloat Y[N];\n\n// initialze the X and Y for N points\n// on circle of radius r\nvoid make_circle(float r)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        float theta = 2 * M_PI / N * i;\n        X[i] = r * cos(theta);\n        Y[i] = r * sin(theta);\n        // draw_circle(X[i], Y[i], 2);\n    }\n}\n\nvoid connect(int i, int j)\n{\n    i = i % N;\n    j = j % N;\n    draw_line(X[i], Y[i], X[j], Y[j]);\n}\n\nvoid connect_all(int delta)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        connect(i, i + delta);\n    }\n}\n\nint main()\n{\n    // initialize the random number generator\n    srand(time(NULL));\n\n    set_stroke_width(0.5);\n    set_stroke(\"#44444480\");\n\n    make_circle(250);\n\n    // connect_all(16);\n    // connect_all(12);\n    // connect_all(7);\n\n    for (int i = 0; i &lt; N; i++)\n    {\n        int d = N / 6;\n\n        connect(i, (i * i) % d);\n    }\n\n    save_sketch(\"lesson2.svg\");\n}",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes 02"
    ]
  },
  {
    "objectID": "lecture-notes/02/index.html#references",
    "href": "lecture-notes/02/index.html#references",
    "title": "Lecture Notes 02",
    "section": "References",
    "text": "References\n\nStructure and Interpretation of Computer Programs\nCurve stitching: the art of sewing beautiful mathematical patterns, Jon Millington",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes 02"
    ]
  },
  {
    "objectID": "lecture-notes/2024-10-14/index.html",
    "href": "lecture-notes/2024-10-14/index.html",
    "title": "A Taste of Python (Mon Oct 14, 2024)",
    "section": "",
    "text": "Type an expression and press Shift + Enter to execute the cell.\n1 + 2\n\n3",
    "crumbs": [
      "Lecture Notes",
      "A Taste of Python (Mon Oct 14, 2024)"
    ]
  },
  {
    "objectID": "lecture-notes/2024-10-14/index.html#a-taste-of-python",
    "href": "lecture-notes/2024-10-14/index.html#a-taste-of-python",
    "title": "A Taste of Python (Mon Oct 14, 2024)",
    "section": "A Taste of Python",
    "text": "A Taste of Python\nPython is a very simple language, yet very powerful.\n\nPython is simple\n\nprint(\"hello, wolrd!\")\n\nhello, wolrd!\n\n\n\n1 + 2\n\n3\n\n\n\n\nPython is dynamically typed\n\nx = 1\ny = 2\nx + y\n\n3\n\n\n\nx = 1\nprint(x)\n\nx = \"hello\"\nprint(x)\n\n1\nhello\n\n\nWhile variables do not have types associated with them, the values do have types and Python is very strict about them.\n\n1 + \"2\"\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[7], line 1\n----&gt; 1 1 + \"2\"\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n\n\n\n\n\nPython uses indentation\n\n# invalid python program\n\nx = 1\n  y = 2\nx + y\n\n\n  Cell In[8], line 4\n    y = 2\n    ^\nIndentationError: unexpected indent\n\n\n\n\n\nmarks = 50\n\nif marks &gt; 35:\n    print(\"pass\")\nelse:\n    print(\"fail\")\n\npass\n\n\nAnother example:\n\nnumbers = [1, 2, 3, 4]\n\nfor n in numbers:\n    print(n)\nprint(\"done\")\n\n1\n2\n3\n4\ndone\n\n\n\n\nPython is Expressive\nSum of square of all even numbers below one million.\n\nsum([n*n for n in range(1000000) if n%2 == 0])\n\n166666166667000000\n\n\n\n!head /usr/share/dict/words\n\nA\nAA\nAAA\nAA's\nAB\nABC\nABC's\nABCs\nABM\nABM's\n\n\n\n!wc -l /usr/share/dict/words\n\n104334 /usr/share/dict/words\n\n\nCan you find the largest word in the dictionary?\n\nmax([3, 4, 5, 8, 2])\n\n8\n\n\n\nmax([\"one\", \"two\", \"three\", \"four\", \"five\"])\n\n'two'\n\n\n\nmax([\"one\", \"two\", \"three\", \"four\", \"five\"], key=len)\n\n'three'\n\n\n\nmax(open(\"/usr/share/dict/words\"), key=len)\n\n\"electroencephalograph's\\n\"\n\n\nHow to find the top 5 words?\n\nsorted(open(\"/usr/share/dict/words\"), key=len)[-5:]\n\n['counterrevolutionaries\\n',\n \"counterrevolutionary's\\n\",\n \"electroencephalogram's\\n\",\n 'electroencephalographs\\n',\n \"electroencephalograph's\\n\"]\n\n\n\n\nPython is Productive\nThis requires a library called requests. You can install it by running:\n\n!python -m pip install requests\n\nRequirement already satisfied: requests in /home/anand/.rye/py/cpython@3.12.3/lib/python3.12/site-packages (2.32.3)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /home/anand/.rye/py/cpython@3.12.3/lib/python3.12/site-packages (from requests) (3.3.2)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in /home/anand/.rye/py/cpython@3.12.3/lib/python3.12/site-packages (from requests) (3.7)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /home/anand/.rye/py/cpython@3.12.3/lib/python3.12/site-packages (from requests) (2.2.2)\nRequirement already satisfied: certifi&gt;=2017.4.17 in /home/anand/.rye/py/cpython@3.12.3/lib/python3.12/site-packages (from requests) (2024.7.4)\n\n\n\nimport requests\n\nurl = \"https://api.github.com/search/repositories\"\nparams = {\n    \"q\": \"ISI Bangalore\"\n}\ndata = requests.get(url, params=params).json()\n\n\ndata.keys()\n\ndict_keys(['total_count', 'incomplete_results', 'items'])\n\n\n\ndata['total_count']\n\n4\n\n\n\ndata['items'][0]\n\n{'id': 832589430,\n 'node_id': 'R_kgDOMaBOdg',\n 'name': 'isi-fcp',\n 'full_name': 'anandology/isi-fcp',\n 'private': False,\n 'owner': {'login': 'anandology',\n  'id': 7569,\n  'node_id': 'MDQ6VXNlcjc1Njk=',\n  'avatar_url': 'https://avatars.githubusercontent.com/u/7569?v=4',\n  'gravatar_id': '',\n  'url': 'https://api.github.com/users/anandology',\n  'html_url': 'https://github.com/anandology',\n  'followers_url': 'https://api.github.com/users/anandology/followers',\n  'following_url': 'https://api.github.com/users/anandology/following{/other_user}',\n  'gists_url': 'https://api.github.com/users/anandology/gists{/gist_id}',\n  'starred_url': 'https://api.github.com/users/anandology/starred{/owner}{/repo}',\n  'subscriptions_url': 'https://api.github.com/users/anandology/subscriptions',\n  'organizations_url': 'https://api.github.com/users/anandology/orgs',\n  'repos_url': 'https://api.github.com/users/anandology/repos',\n  'events_url': 'https://api.github.com/users/anandology/events{/privacy}',\n  'received_events_url': 'https://api.github.com/users/anandology/received_events',\n  'type': 'User',\n  'site_admin': False},\n 'html_url': 'https://github.com/anandology/isi-fcp',\n 'description': 'Course respository for the Fundamentals of Computing and Programming at ISI Bangalore',\n 'fork': False,\n 'url': 'https://api.github.com/repos/anandology/isi-fcp',\n 'forks_url': 'https://api.github.com/repos/anandology/isi-fcp/forks',\n 'keys_url': 'https://api.github.com/repos/anandology/isi-fcp/keys{/key_id}',\n 'collaborators_url': 'https://api.github.com/repos/anandology/isi-fcp/collaborators{/collaborator}',\n 'teams_url': 'https://api.github.com/repos/anandology/isi-fcp/teams',\n 'hooks_url': 'https://api.github.com/repos/anandology/isi-fcp/hooks',\n 'issue_events_url': 'https://api.github.com/repos/anandology/isi-fcp/issues/events{/number}',\n 'events_url': 'https://api.github.com/repos/anandology/isi-fcp/events',\n 'assignees_url': 'https://api.github.com/repos/anandology/isi-fcp/assignees{/user}',\n 'branches_url': 'https://api.github.com/repos/anandology/isi-fcp/branches{/branch}',\n 'tags_url': 'https://api.github.com/repos/anandology/isi-fcp/tags',\n 'blobs_url': 'https://api.github.com/repos/anandology/isi-fcp/git/blobs{/sha}',\n 'git_tags_url': 'https://api.github.com/repos/anandology/isi-fcp/git/tags{/sha}',\n 'git_refs_url': 'https://api.github.com/repos/anandology/isi-fcp/git/refs{/sha}',\n 'trees_url': 'https://api.github.com/repos/anandology/isi-fcp/git/trees{/sha}',\n 'statuses_url': 'https://api.github.com/repos/anandology/isi-fcp/statuses/{sha}',\n 'languages_url': 'https://api.github.com/repos/anandology/isi-fcp/languages',\n 'stargazers_url': 'https://api.github.com/repos/anandology/isi-fcp/stargazers',\n 'contributors_url': 'https://api.github.com/repos/anandology/isi-fcp/contributors',\n 'subscribers_url': 'https://api.github.com/repos/anandology/isi-fcp/subscribers',\n 'subscription_url': 'https://api.github.com/repos/anandology/isi-fcp/subscription',\n 'commits_url': 'https://api.github.com/repos/anandology/isi-fcp/commits{/sha}',\n 'git_commits_url': 'https://api.github.com/repos/anandology/isi-fcp/git/commits{/sha}',\n 'comments_url': 'https://api.github.com/repos/anandology/isi-fcp/comments{/number}',\n 'issue_comment_url': 'https://api.github.com/repos/anandology/isi-fcp/issues/comments{/number}',\n 'contents_url': 'https://api.github.com/repos/anandology/isi-fcp/contents/{+path}',\n 'compare_url': 'https://api.github.com/repos/anandology/isi-fcp/compare/{base}...{head}',\n 'merges_url': 'https://api.github.com/repos/anandology/isi-fcp/merges',\n 'archive_url': 'https://api.github.com/repos/anandology/isi-fcp/{archive_format}{/ref}',\n 'downloads_url': 'https://api.github.com/repos/anandology/isi-fcp/downloads',\n 'issues_url': 'https://api.github.com/repos/anandology/isi-fcp/issues{/number}',\n 'pulls_url': 'https://api.github.com/repos/anandology/isi-fcp/pulls{/number}',\n 'milestones_url': 'https://api.github.com/repos/anandology/isi-fcp/milestones{/number}',\n 'notifications_url': 'https://api.github.com/repos/anandology/isi-fcp/notifications{?since,all,participating}',\n 'labels_url': 'https://api.github.com/repos/anandology/isi-fcp/labels{/name}',\n 'releases_url': 'https://api.github.com/repos/anandology/isi-fcp/releases{/id}',\n 'deployments_url': 'https://api.github.com/repos/anandology/isi-fcp/deployments',\n 'created_at': '2024-07-23T10:25:25Z',\n 'updated_at': '2024-10-13T18:59:50Z',\n 'pushed_at': '2024-10-13T19:00:21Z',\n 'git_url': 'git://github.com/anandology/isi-fcp.git',\n 'ssh_url': 'git@github.com:anandology/isi-fcp.git',\n 'clone_url': 'https://github.com/anandology/isi-fcp.git',\n 'svn_url': 'https://github.com/anandology/isi-fcp',\n 'homepage': 'https://anandology.github.io/isi-fcp/',\n 'size': 2867,\n 'stargazers_count': 6,\n 'watchers_count': 6,\n 'language': 'C',\n 'has_issues': True,\n 'has_projects': True,\n 'has_downloads': True,\n 'has_wiki': True,\n 'has_pages': True,\n 'has_discussions': True,\n 'forks_count': 0,\n 'mirror_url': None,\n 'archived': False,\n 'disabled': False,\n 'open_issues_count': 0,\n 'license': None,\n 'allow_forking': True,\n 'is_template': False,\n 'web_commit_signoff_required': False,\n 'topics': [],\n 'visibility': 'public',\n 'forks': 0,\n 'open_issues': 0,\n 'watchers': 6,\n 'default_branch': 'main',\n 'score': 1.0}\n\n\n\ndata['items'][0]['full_name']\n\n'anandology/isi-fcp'\n\n\n\nfor repo in data['items']:\n    print(repo['full_name'])\n\nanandology/isi-fcp\nisibangculturalcommittee/isibangculturalcommittee.github.io\nMathClubISIB/mathclubisib.github.io\nsudiptarakshit/ML-Modules-ISI\n\n\nLet’s put all of this together.\n\nimport requests\n\nurl = \"https://api.github.com/search/repositories\"\nparams = {\n    \"q\": \"hyperbolic geometry language:python\"\n}\ndata = requests.get(url, params=params).json()\n\nfor repo in data['items']:\n    print(repo['full_name'])\n\ncduck/hyperbolic\nevfro/HyperbolicRecommenders\nEloind/Hyperbolic-Geometry\nyankai-chen/LKGR\ntjweisman/geometry_tools\nLabardini/Hyperbolic-GeometPy\nmountain/hyperbolic-wythoff\nya-wei-eileen-lin/HyperbolicDiffusionDistance\nnunukim/explore_hyperbolic_geometry\nnbubis/Poincare\ntrevorBajkowski/hyperbolicPoincareDiskGeometry\nTinfoilHat0/Hyperbolic-Generator\nhdbray/hyperbolic_geometry\ncalwoo/hyperbolic\nJWKennington/pyperbolic\nstla/PyMobiusHyperbolic\nMonkeyUnderMountain/PopularizeGeometry\nasahidari/gyrovector_hyperbolic_b3d\nDRWardrope/TFGeoTests\ndrewitz/VIPer\nzbovaird/UHG-Library\nLuckyGirl-XU/STGN\nRajwrita/Poincare-Embeddings\nAnoushkaVyas/HyperCode\nBStandage/CuttingSequence\nmountain/sunspot\n\n\n\n\nurl = \"https://api.frankfurter.app/latest\"\nparams = {\"base\": \"USD\", \"symbols\": \"INR\"}\n\nrequests.get(url, params=params).json()\n\n{'amount': 1.0, 'base': 'USD', 'date': '2024-10-11', 'rates': {'INR': 84.07}}\n\n\n\ndata = requests.get(url, params=params).json()\ndata['rates']['INR']\n\n84.07",
    "crumbs": [
      "Lecture Notes",
      "A Taste of Python (Mon Oct 14, 2024)"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "python/numpy.html",
    "href": "python/numpy.html",
    "title": "Introduction to Numpy",
    "section": "",
    "text": "Numpy is the numerical computing library in Python, that provides wonderful support for creating and manipulating arrays.\nimport numpy as np",
    "crumbs": [
      "Introduction to Python",
      "Introduction to Numpy"
    ]
  },
  {
    "objectID": "python/numpy.html#introduction-to-numpy-arrays",
    "href": "python/numpy.html#introduction-to-numpy-arrays",
    "title": "Introduction to Numpy",
    "section": "Introduction to Numpy Arrays",
    "text": "Introduction to Numpy Arrays\nLet’s start with creating an array.\n\nx = np.array([1, 2, 3, 4, 5])\n\n\nx\n\narray([1, 2, 3, 4, 5])\n\n\nNumpy allows vector operations on arrays. These operations that work on every element of the array.\n\nx + 10\n\narray([11, 12, 13, 14, 15])\n\n\n\nx*x\n\narray([ 1,  4,  9, 16, 25])",
    "crumbs": [
      "Introduction to Python",
      "Introduction to Numpy"
    ]
  },
  {
    "objectID": "python/numpy.html#multi-dimentional-arrays",
    "href": "python/numpy.html#multi-dimentional-arrays",
    "title": "Introduction to Numpy",
    "section": "Multi-dimentional arrays",
    "text": "Multi-dimentional arrays\nNumpy supports n-dimentional arrays.\n\nd = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])\n\n\nd\n\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\nd + 10\n\narray([[11, 12, 13, 14],\n       [15, 16, 17, 18]])\n\n\n\nd*d\n\narray([[ 1,  4,  9, 16],\n       [25, 36, 49, 64]])\n\n\nIt supports many mathematical functions to work with 2-d arrays or matrices.\n\nnp.transpose(d)\n\narray([[1, 5],\n       [2, 6],\n       [3, 7],\n       [4, 8]])\n\n\n\nd1 = np.transpose(d)\n\n\nnp.dot(d, d1)\n\narray([[ 30,  70],\n       [ 70, 174]])\n\n\nIt also suppports even higher dimentional arrays, though we may not use to them in this course.\n\nd3 = np.array([\n    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]],\n    [[13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24]]])\n\nd3\n\narray([[[ 1,  2,  3,  4],\n        [ 5,  6,  7,  8],\n        [ 9, 10, 11, 12]],\n\n       [[13, 14, 15, 16],\n        [17, 18, 19, 20],\n        [21, 22, 23, 24]]])\n\n\n\nThe shape and dtype\nEvery array has a shape showing the size of the array in each dimention and dtype indicating the datatype of each element in the array.\nPlease note that all elements of an array will be of the same datatype.\n\nx = np.array([1, 2, 3, 4, 5])\nd = np.array([\n    [1, 2, 3, 4], \n    [5, 6, 7, 8]])\n\n\nx.shape\n\n(5,)\n\n\n\nd.shape\n\n(2, 4)\n\n\nThe array x is a one dimentional array and d is a two dimentional array.\nYou may be surprised why x.shape is shown as (5,) instead of (5). In python the parenthesis are used both for grouping and to represent tuples (kind-of read-only lists). The value of (5) is 5 because it is considered as grouping. It is just like (2 + 3). However if we want to represent a tuple of size 1, the only way is to include a comma to force to treat that as a tuple.\n\nx.dtype\n\ndtype('int64')\n\n\nThe elements of x are are 64-bit integers.\n\nx2 = np.array([0.1, 0.2, 0.3])\n\n\nx2.dtype\n\ndtype('float64')\n\n\nWhen we use decimal numbers, it used a dtype of float64.",
    "crumbs": [
      "Introduction to Python",
      "Introduction to Numpy"
    ]
  },
  {
    "objectID": "python/numpy.html#creating-arrays",
    "href": "python/numpy.html#creating-arrays",
    "title": "Introduction to Numpy",
    "section": "Creating Arrays",
    "text": "Creating Arrays\nWhile we can create arrays by giving all the elements, like we did in the example above, it is not practical to create large arrays like that. Numpy has utilities to create arrays.\n\n# create 10 zeros\nnp.zeros(10)\n\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n\n\n\n# create 10 ones\nnp.ones(10)\n\narray([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])\n\n\n\n# range of numbers from 0 to 1 in steps of 0.1\n# please note that the end is not included\nnp.arange(0, 1, 0.1)\n\narray([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\n\n\nThe linspace function takes the begin and end and divides that into a number of points. Unlike arange, the result of linspace includes the end.\n\nnp.linspace(0, 1, 11)\n\narray([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])\n\n\n\nnp.linspace(0, 1, 5)\n\narray([0.  , 0.25, 0.5 , 0.75, 1.  ])",
    "crumbs": [
      "Introduction to Python",
      "Introduction to Numpy"
    ]
  },
  {
    "objectID": "python/numpy.html#utilties",
    "href": "python/numpy.html#utilties",
    "title": "Introduction to Numpy",
    "section": "Utilties",
    "text": "Utilties\nNumpy has many utilties and mathematical functions.\n\nnp.pi\n\n3.141592653589793\n\n\n\n# convert degrees to radians\nnp.radians(90)\n\n1.5707963267948966\n\n\n\nangles = np.linspace(0, 360, 13)\n\n\nangles\n\narray([  0.,  30.,  60.,  90., 120., 150., 180., 210., 240., 270., 300.,\n       330., 360.])\n\n\n\nangles_in_radians = np.radians(angles)\n\n\nangles_in_radians\n\narray([0.        , 0.52359878, 1.04719755, 1.57079633, 2.0943951 ,\n       2.61799388, 3.14159265, 3.66519143, 4.1887902 , 4.71238898,\n       5.23598776, 5.75958653, 6.28318531])\n\n\n\n# we can also create the angles in radians\nnp.linspace(0, 2*np.pi, 13)\n\narray([0.        , 0.52359878, 1.04719755, 1.57079633, 2.0943951 ,\n       2.61799388, 3.14159265, 3.66519143, 4.1887902 , 4.71238898,\n       5.23598776, 5.75958653, 6.28318531])\n\n\nNumpy support trigonometric functions as well.\n\nnp.sin(angles_in_radians)\n\narray([ 0.00000000e+00,  5.00000000e-01,  8.66025404e-01,  1.00000000e+00,\n        8.66025404e-01,  5.00000000e-01,  1.22464680e-16, -5.00000000e-01,\n       -8.66025404e-01, -1.00000000e+00, -8.66025404e-01, -5.00000000e-01,\n       -2.44929360e-16])\n\n\n\nnp.cos(angles_in_radians)\n\narray([ 1.00000000e+00,  8.66025404e-01,  5.00000000e-01,  6.12323400e-17,\n       -5.00000000e-01, -8.66025404e-01, -1.00000000e+00, -8.66025404e-01,\n       -5.00000000e-01, -1.83697020e-16,  5.00000000e-01,  8.66025404e-01,\n        1.00000000e+00])\n\n\nThe common mathematical functions like sqrt and abs are available too.\n\nx = np.arange(10)\n\n\nx\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\nnp.sqrt(x)\n\narray([0.        , 1.        , 1.41421356, 1.73205081, 2.        ,\n       2.23606798, 2.44948974, 2.64575131, 2.82842712, 3.        ])\n\n\n\nx-5\n\narray([-5, -4, -3, -2, -1,  0,  1,  2,  3,  4])\n\n\n\nx1 = np.abs(x-5)\nx1\n\narray([5, 4, 3, 2, 1, 0, 1, 2, 3, 4])\n\n\n\nnp.sum(x1)\n\n25\n\n\n\nExample: Euclidean Distance\nEuclidian distance between two vectors is defines as:\n\\(E(p, q) = \\sqrt{\\sum_{i=1}^{n}{(p_i-q_i)^2}}\\)\nWrite a function euclidian_distance to compute the euclidian distance between two vectors specified as numpy arrays.\n\ndef eucliean_distance(p, q):\n    d = p-q\n    total = np.sum(d*d)\n    return np.sqrt(total)\n\n\np = np.array([1.0, 2.0, 3.0])\nq = np.array([4.0, 5.0, 6.0])\n\n\neucliean_distance(p, q)\n\n5.196152422706632\n\n\nYou can verify that step-by-step.\n\nd = p-q\nd\n\narray([-3., -3., -3.])\n\n\n\nd*d\n\narray([9., 9., 9.])\n\n\n\ntotal = np.sum(d*d)\ntotal\n\n27.0\n\n\n\nnp.sqrt(total)\n\n5.196152422706632\n\n\n\n\nProblem: Manhattan Distance\nWrite a function manhattan_distance to compute the manhattan distance between two vectors.\nThe manhattan distance is defined as:\n\\(M(p, q) = \\sum_{i=1}^{n}{| p_i - q_i |}\\)\nFor more info see: https://en.wikipedia.org/wiki/Taxicab_geometry\n&gt;&gt;&gt; manhanttan_distance(np.array([0,0]), np.array([3, 4]))\n7",
    "crumbs": [
      "Introduction to Python",
      "Introduction to Numpy"
    ]
  },
  {
    "objectID": "git.html",
    "href": "git.html",
    "title": "Introduction to Git",
    "section": "",
    "text": "Git is a popular version control system used to keep track of changes to various files.\n\n\n\n\n\nSetup git by configuring your name and email address in git.\n$ git config --global user.name \"Anand Chitipothu\"\n$ git config --global user.email \"anand@example.com\"\nPlease use your name and email address in the example above. Also, make sure the email address is same as what you have used when creating an account on github.\n\n\n\n$ ssh-keygen -t ed25519 -C anand@my-laptop-name\nThat will output the following:\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/home/anand/.ssh/id_ed25519):\nJust press Enter.\nEnter passphrase (empty for no passphrase):\nIf you are using your own laptop, leave this empty. If you using the lab computer, pick a strong passphrase as that allows pusing any changes to your repositories on github.\n\n\n\n\n\nUse git for managing your own projects.\n\n\n\nUse git to collaborate with a small number of known people.\n\n\n\nCollaborate with unknown, untrusted people.\n\n\n\n\nRun these steps after creating your repository and adding your ssh-keys.\n$ cd\n$ pwd\n/home/anand\n$\n$ git clone git@github.com:anandology/git-practice.git\nCloning into 'git-practice'...\nremote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (4/4), done.\nremote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)\nReceiving objects: 100% (4/4), done.\n$ cd git-practice/\n$ code .\nReplace the repository URL in the example with the URL of your repoistory clone URL.\n\n\n\nCreate a new file.\n$ seq 10 &gt; 10.txt\nAdd the file to git staging area.\n$ git add 10.txt\n$ git status\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        new file:   10.txt\nCommit the changes.\n$ git commit -m \"Added 10.txt\"\n[main b8c9a60] added 10.txt file\n 1 file changed, 10 insertions(+)\n create mode 100644 10.txt\nAnd push the changes.\n$ git push\n...\nTo github.com:anandology/git-practice.git\n   b8c9a60..e53d588  main -&gt; main\n\n\n\n\nGIT CHEAT SHEET - Github (PDF)\nGetting Started with Git - Github\nVersion Control with Git - Software Carpentry",
    "crumbs": [
      "Introduction to Git"
    ]
  },
  {
    "objectID": "git.html#setting-up-git",
    "href": "git.html#setting-up-git",
    "title": "Introduction to Git",
    "section": "",
    "text": "Setup git by configuring your name and email address in git.\n$ git config --global user.name \"Anand Chitipothu\"\n$ git config --global user.email \"anand@example.com\"\nPlease use your name and email address in the example above. Also, make sure the email address is same as what you have used when creating an account on github.",
    "crumbs": [
      "Introduction to Git"
    ]
  },
  {
    "objectID": "git.html#setup-ssh-keys",
    "href": "git.html#setup-ssh-keys",
    "title": "Introduction to Git",
    "section": "",
    "text": "$ ssh-keygen -t ed25519 -C anand@my-laptop-name\nThat will output the following:\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/home/anand/.ssh/id_ed25519):\nJust press Enter.\nEnter passphrase (empty for no passphrase):\nIf you are using your own laptop, leave this empty. If you using the lab computer, pick a strong passphrase as that allows pusing any changes to your repositories on github.",
    "crumbs": [
      "Introduction to Git"
    ]
  },
  {
    "objectID": "git.html#git-usage-complexity",
    "href": "git.html#git-usage-complexity",
    "title": "Introduction to Git",
    "section": "",
    "text": "Use git for managing your own projects.\n\n\n\nUse git to collaborate with a small number of known people.\n\n\n\nCollaborate with unknown, untrusted people.",
    "crumbs": [
      "Introduction to Git"
    ]
  },
  {
    "objectID": "git.html#cloning-a-repository",
    "href": "git.html#cloning-a-repository",
    "title": "Introduction to Git",
    "section": "",
    "text": "Run these steps after creating your repository and adding your ssh-keys.\n$ cd\n$ pwd\n/home/anand\n$\n$ git clone git@github.com:anandology/git-practice.git\nCloning into 'git-practice'...\nremote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (4/4), done.\nremote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)\nReceiving objects: 100% (4/4), done.\n$ cd git-practice/\n$ code .\nReplace the repository URL in the example with the URL of your repoistory clone URL.",
    "crumbs": [
      "Introduction to Git"
    ]
  },
  {
    "objectID": "git.html#commiting-changes",
    "href": "git.html#commiting-changes",
    "title": "Introduction to Git",
    "section": "",
    "text": "Create a new file.\n$ seq 10 &gt; 10.txt\nAdd the file to git staging area.\n$ git add 10.txt\n$ git status\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        new file:   10.txt\nCommit the changes.\n$ git commit -m \"Added 10.txt\"\n[main b8c9a60] added 10.txt file\n 1 file changed, 10 insertions(+)\n create mode 100644 10.txt\nAnd push the changes.\n$ git push\n...\nTo github.com:anandology/git-practice.git\n   b8c9a60..e53d588  main -&gt; main",
    "crumbs": [
      "Introduction to Git"
    ]
  },
  {
    "objectID": "git.html#references",
    "href": "git.html#references",
    "title": "Introduction to Git",
    "section": "",
    "text": "GIT CHEAT SHEET - Github (PDF)\nGetting Started with Git - Github\nVersion Control with Git - Software Carpentry",
    "crumbs": [
      "Introduction to Git"
    ]
  },
  {
    "objectID": "unix-power-tools.html",
    "href": "unix-power-tools.html",
    "title": "Unix Power Tools",
    "section": "",
    "text": "Unix has many power tools to automate a lot of boring things. In this chapter, we’ll look at some of those tools.\n\n\nWildcard is pattern to specify match filenames.\nThe most common pattern is *, which matches any characters.\nFor example, the following program lists all the files with .c extension.\n$ ls *.c\nThe other commony used wildcard pattern is [0-9], which matches any character in that range.\n[0-9] - match any letter from 0 to 9\n[0-9a-f] - match any letter from 0 to 9 and a to f\n[abc] - match any one of a, b and c\n\n\n\nRegular Expressions are used to search for and replace various patterns in text.\nTODO:\n\n\n\nSorts the input.\nTODO:\n\n\n\nFind the unique elements in a sorted input.\n\n\n\nThe find is used to find files a directory that match given conditions.\nUSAGE:\n\nfind path expressions\nLet’s look at some examples.\nFind all the c files in the current directory.\n$ find . -name '*.c'\nThe name uses a wildcard pattern, a pattern in which *\nFind all subdirectories in the current directory tree.\n$ find . -type d\nFind all files in /usr/bin which are larger than 10MB.\n$ find /usr/bin -size +10M\nFind all files in current directory which are modified in the last 2 days.\n$ find . -mtime -2\nFind all files in current directory which are modified in the last 2 hours (120 minutes).\n$ find . -mmin -120\nFind all the c files in the current directory and run wc command for each of them.\n$ find . -name '*.c' -exec wc {} \\;\nWhen using -exec, write the command and use {} where you want the matched file to substitued and end it with \\;.\nYou can also do the same using xargs.\n$ find . -name '*.c' | xargs wc\n\n\n\nTODO:\n\n\n\nAwk is a mini language for manipulating columns of data.\nTODO:\n\n\n\n\nPrint all not empty lines in a file\nPrint a file with line numbers\nPrint only even lines in a file\n\n\n\n\nSee class notes on Unix Power Tools for the examples covered in the class.\n\n\n\n\nUnix Power Tools -\nAwk - Wizardzines",
    "crumbs": [
      "Unix Power Tools"
    ]
  },
  {
    "objectID": "unix-power-tools.html#wildcards",
    "href": "unix-power-tools.html#wildcards",
    "title": "Unix Power Tools",
    "section": "",
    "text": "Wildcard is pattern to specify match filenames.\nThe most common pattern is *, which matches any characters.\nFor example, the following program lists all the files with .c extension.\n$ ls *.c\nThe other commony used wildcard pattern is [0-9], which matches any character in that range.\n[0-9] - match any letter from 0 to 9\n[0-9a-f] - match any letter from 0 to 9 and a to f\n[abc] - match any one of a, b and c",
    "crumbs": [
      "Unix Power Tools"
    ]
  },
  {
    "objectID": "unix-power-tools.html#regular-expressions",
    "href": "unix-power-tools.html#regular-expressions",
    "title": "Unix Power Tools",
    "section": "",
    "text": "Regular Expressions are used to search for and replace various patterns in text.\nTODO:",
    "crumbs": [
      "Unix Power Tools"
    ]
  },
  {
    "objectID": "unix-power-tools.html#sort",
    "href": "unix-power-tools.html#sort",
    "title": "Unix Power Tools",
    "section": "",
    "text": "Sorts the input.\nTODO:",
    "crumbs": [
      "Unix Power Tools"
    ]
  },
  {
    "objectID": "unix-power-tools.html#uniq",
    "href": "unix-power-tools.html#uniq",
    "title": "Unix Power Tools",
    "section": "",
    "text": "Find the unique elements in a sorted input.",
    "crumbs": [
      "Unix Power Tools"
    ]
  },
  {
    "objectID": "unix-power-tools.html#find---finding-files",
    "href": "unix-power-tools.html#find---finding-files",
    "title": "Unix Power Tools",
    "section": "",
    "text": "The find is used to find files a directory that match given conditions.\nUSAGE:\n\nfind path expressions\nLet’s look at some examples.\nFind all the c files in the current directory.\n$ find . -name '*.c'\nThe name uses a wildcard pattern, a pattern in which *\nFind all subdirectories in the current directory tree.\n$ find . -type d\nFind all files in /usr/bin which are larger than 10MB.\n$ find /usr/bin -size +10M\nFind all files in current directory which are modified in the last 2 days.\n$ find . -mtime -2\nFind all files in current directory which are modified in the last 2 hours (120 minutes).\n$ find . -mmin -120\nFind all the c files in the current directory and run wc command for each of them.\n$ find . -name '*.c' -exec wc {} \\;\nWhen using -exec, write the command and use {} where you want the matched file to substitued and end it with \\;.\nYou can also do the same using xargs.\n$ find . -name '*.c' | xargs wc",
    "crumbs": [
      "Unix Power Tools"
    ]
  },
  {
    "objectID": "unix-power-tools.html#grep",
    "href": "unix-power-tools.html#grep",
    "title": "Unix Power Tools",
    "section": "",
    "text": "TODO:",
    "crumbs": [
      "Unix Power Tools"
    ]
  },
  {
    "objectID": "unix-power-tools.html#awk",
    "href": "unix-power-tools.html#awk",
    "title": "Unix Power Tools",
    "section": "",
    "text": "Awk is a mini language for manipulating columns of data.\nTODO:",
    "crumbs": [
      "Unix Power Tools"
    ]
  },
  {
    "objectID": "unix-power-tools.html#problems",
    "href": "unix-power-tools.html#problems",
    "title": "Unix Power Tools",
    "section": "",
    "text": "Print all not empty lines in a file\nPrint a file with line numbers\nPrint only even lines in a file",
    "crumbs": [
      "Unix Power Tools"
    ]
  },
  {
    "objectID": "unix-power-tools.html#class-notes",
    "href": "unix-power-tools.html#class-notes",
    "title": "Unix Power Tools",
    "section": "",
    "text": "See class notes on Unix Power Tools for the examples covered in the class.",
    "crumbs": [
      "Unix Power Tools"
    ]
  },
  {
    "objectID": "unix-power-tools.html#references",
    "href": "unix-power-tools.html#references",
    "title": "Unix Power Tools",
    "section": "",
    "text": "Unix Power Tools -\nAwk - Wizardzines",
    "crumbs": [
      "Unix Power Tools"
    ]
  },
  {
    "objectID": "python/taste-of-python.html",
    "href": "python/taste-of-python.html",
    "title": "A Taste of Python",
    "section": "",
    "text": "Welcome to the world of Python.\nPython is very simple language to learn, yet it is quite powerful.\nLet’s get a taste of Python by looking at a couple of examples.\n\n\nPython is a very simple programming language and it is quite easy to learn.\nWriting a hello-world program just takes a single line of code.\n\nprint(\"hello, world!\")\n\nhello, world!\n\n\nIt is very handy to use Python as a calculator.\n\nprint(1 + 2)\n\n3\n\n\n\n\n\nPython is a dynamically typed programming language, so you don’t need to declare type of variables.\n\nx = 1\ny = 2\nprint(x + y)\n\n3\n\n\nIt is perfectly fine to reassign a variable to a value of a different type.\n\nx = 1\nprint(x)\n\nx = \"foo\"\nprint(x)\n\n1\nfoo\n\n\nWhile the variables do not have types associated with them, the values do have types. Python is strict about them and it doesn’t allow operations on incompatible datatypes.\n\n1 + \"2\"\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 1 + \"2\"\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n\n\n\nPeople often assume that a dynamically-typed language is also weekly-typed, which is the case for languages like Perl, PHP and even Javascript. Python is dynamically-typed, but also strongly-typed.\n\n\n\nPython uses indentation to identify the code that is part of a block.\n\nmarks = 50\n\nif marks &gt; 35:\n    print(\"pass\")\nelse:\n    print(\"fail\")\n\npass\n\n\nNotice that Python doesn’t use the usual { and } characters to identify code blocks. It just uses indentation to identify the block of code that is part of compound statements like if, else, etc.\nHere is another example:\n\nnumbers = [1, 2, 3, 4]\n\nfor n in numbers:\n    print(n)\nprint(\"done\")\n\n1\n2\n3\n4\ndone\n\n\n\n\n\nPython has elegant data strucutres and many built-in functions.\nUsing them the right way leads to very elegant code.\nFor example, the following example computes the sum of squares of all even numbers below one million.\n\n# sum of squares of all even numbers below one million\nsum([n*n for n in range(1000000) if n % 2 == 0])\n\n166666166667000000\n\n\nIsn’t that almost like restating the problem?\nNot impressed yet? Here is another gem to find the longest word in the english dictionary1.\n\n# what is the lonest word in the dictioanary\nmax(open(\"/usr/share/dict/words\"), key=len)\n\n\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[9], line 2\n      1 # what is the lonest word in the dictioanary\n----&gt; 2 max(open(\"/usr/share/dict/words\"), key=len)\n\nFile ~/.local/lib/python3.10/site-packages/IPython/core/interactiveshell.py:324, in _modified_open(file, *args, **kwargs)\n    317 if file in {0, 1, 2}:\n    318     raise ValueError(\n    319         f\"IPython won't let you open fd={file} by default \"\n    320         \"as it is likely to crash IPython. If you know what you are doing, \"\n    321         \"you can use builtins' open.\"\n    322     )\n--&gt; 324 return io_open(file, *args, **kwargs)\n\nFileNotFoundError: [Errno 2] No such file or directory: '/usr/share/dict/words'\n\n\n\n\n\n\nPython has an extensive standard library and many third-party libraries.\nThe following example find the most popular repositories on github.\n\nimport requests\n\nurl = \"https://api.github.com/search/repositories\"\nparams = {\n    \"q\": \"language:python\"\n}\n\ndata = requests.get(url, params=params).json()\n\nfor repo in data['items'][:10]:\n    print(repo['full_name'])\n\nkeras-team/keras\nscikit-learn/scikit-learn\ndeepfakes/faceswap\nTextualize/rich\ncharlax/professional-programming\nfaif/python-patterns\npsf/black\nodoo/odoo\n0voice/interview_internal_reference\ngto76/python-cheatsheet",
    "crumbs": [
      "Introduction to Python",
      "A Taste of Python"
    ]
  },
  {
    "objectID": "python/taste-of-python.html#python-is-simple",
    "href": "python/taste-of-python.html#python-is-simple",
    "title": "A Taste of Python",
    "section": "",
    "text": "Python is a very simple programming language and it is quite easy to learn.\nWriting a hello-world program just takes a single line of code.\n\nprint(\"hello, world!\")\n\nhello, world!\n\n\nIt is very handy to use Python as a calculator.\n\nprint(1 + 2)\n\n3",
    "crumbs": [
      "Introduction to Python",
      "A Taste of Python"
    ]
  },
  {
    "objectID": "python/taste-of-python.html#python-is-dynamically-typed",
    "href": "python/taste-of-python.html#python-is-dynamically-typed",
    "title": "A Taste of Python",
    "section": "",
    "text": "Python is a dynamically typed programming language, so you don’t need to declare type of variables.\n\nx = 1\ny = 2\nprint(x + y)\n\n3\n\n\nIt is perfectly fine to reassign a variable to a value of a different type.\n\nx = 1\nprint(x)\n\nx = \"foo\"\nprint(x)\n\n1\nfoo\n\n\nWhile the variables do not have types associated with them, the values do have types. Python is strict about them and it doesn’t allow operations on incompatible datatypes.\n\n1 + \"2\"\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 1 + \"2\"\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n\n\n\nPeople often assume that a dynamically-typed language is also weekly-typed, which is the case for languages like Perl, PHP and even Javascript. Python is dynamically-typed, but also strongly-typed.",
    "crumbs": [
      "Introduction to Python",
      "A Taste of Python"
    ]
  },
  {
    "objectID": "python/taste-of-python.html#python-uses-indentation",
    "href": "python/taste-of-python.html#python-uses-indentation",
    "title": "A Taste of Python",
    "section": "",
    "text": "Python uses indentation to identify the code that is part of a block.\n\nmarks = 50\n\nif marks &gt; 35:\n    print(\"pass\")\nelse:\n    print(\"fail\")\n\npass\n\n\nNotice that Python doesn’t use the usual { and } characters to identify code blocks. It just uses indentation to identify the block of code that is part of compound statements like if, else, etc.\nHere is another example:\n\nnumbers = [1, 2, 3, 4]\n\nfor n in numbers:\n    print(n)\nprint(\"done\")\n\n1\n2\n3\n4\ndone",
    "crumbs": [
      "Introduction to Python",
      "A Taste of Python"
    ]
  },
  {
    "objectID": "python/taste-of-python.html#python-is-expressive",
    "href": "python/taste-of-python.html#python-is-expressive",
    "title": "A Taste of Python",
    "section": "",
    "text": "Python has elegant data strucutres and many built-in functions.\nUsing them the right way leads to very elegant code.\nFor example, the following example computes the sum of squares of all even numbers below one million.\n\n# sum of squares of all even numbers below one million\nsum([n*n for n in range(1000000) if n % 2 == 0])\n\n166666166667000000\n\n\nIsn’t that almost like restating the problem?\nNot impressed yet? Here is another gem to find the longest word in the english dictionary1.\n\n# what is the lonest word in the dictioanary\nmax(open(\"/usr/share/dict/words\"), key=len)\n\n\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[9], line 2\n      1 # what is the lonest word in the dictioanary\n----&gt; 2 max(open(\"/usr/share/dict/words\"), key=len)\n\nFile ~/.local/lib/python3.10/site-packages/IPython/core/interactiveshell.py:324, in _modified_open(file, *args, **kwargs)\n    317 if file in {0, 1, 2}:\n    318     raise ValueError(\n    319         f\"IPython won't let you open fd={file} by default \"\n    320         \"as it is likely to crash IPython. If you know what you are doing, \"\n    321         \"you can use builtins' open.\"\n    322     )\n--&gt; 324 return io_open(file, *args, **kwargs)\n\nFileNotFoundError: [Errno 2] No such file or directory: '/usr/share/dict/words'",
    "crumbs": [
      "Introduction to Python",
      "A Taste of Python"
    ]
  },
  {
    "objectID": "python/taste-of-python.html#python-is-productive",
    "href": "python/taste-of-python.html#python-is-productive",
    "title": "A Taste of Python",
    "section": "",
    "text": "Python has an extensive standard library and many third-party libraries.\nThe following example find the most popular repositories on github.\n\nimport requests\n\nurl = \"https://api.github.com/search/repositories\"\nparams = {\n    \"q\": \"language:python\"\n}\n\ndata = requests.get(url, params=params).json()\n\nfor repo in data['items'][:10]:\n    print(repo['full_name'])\n\nkeras-team/keras\nscikit-learn/scikit-learn\ndeepfakes/faceswap\nTextualize/rich\ncharlax/professional-programming\nfaif/python-patterns\npsf/black\nodoo/odoo\n0voice/interview_internal_reference\ngto76/python-cheatsheet",
    "crumbs": [
      "Introduction to Python",
      "A Taste of Python"
    ]
  },
  {
    "objectID": "python/taste-of-python.html#footnotes",
    "href": "python/taste-of-python.html#footnotes",
    "title": "A Taste of Python",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nOn unix machines, the words in the dictionary are usually available in the file /usr/share/dict/words.↩︎",
    "crumbs": [
      "Introduction to Python",
      "A Taste of Python"
    ]
  },
  {
    "objectID": "python/plotting.html",
    "href": "python/plotting.html",
    "title": "Plotting Graphs",
    "section": "",
    "text": "The matplotlib is one of the most popular libraries for plotting graphs with Python. Unlike many modern counterparts, matplotlib is primarily designed to produce static plots. It is still a popular option to generate publication quality plots in the academia.\nWhile it is easy to get started, it is very flexible and allows drawing complex things.\nWhile interactivity is not part of its design, we can achieve that using interactive widgets and creating animations. However, that may required a lot more code and may sound tedius.\nNeedless to day, we use numpy arrays for plotting graphs.\nimport numpy as np\nimport matplotlib.pyplot as plt",
    "crumbs": [
      "Introduction to Python",
      "Plotting Graphs"
    ]
  },
  {
    "objectID": "python/plotting.html#getting-started-with-plotting",
    "href": "python/plotting.html#getting-started-with-plotting",
    "title": "Plotting Graphs",
    "section": "Getting started with plotting",
    "text": "Getting started with plotting\nLet’s plot sqrt.\n\nx = np.linspace(0, 2, 100)\ny = np.sqrt(x)\n\n\nplt.plot(x, y)\n\n# add a grid to the graph\nplt.grid()\n\n\n\n\n\n\n\n\nWe can even plot multiple plots in the same figure.\n\nx = np.linspace(0, 2, 100)\n\nplt.plot(x, x)\nplt.plot(x, x*x)\nplt.plot(x, np.sqrt(x))\n\nplt.grid()\n\n\n\n\n\n\n\n\nIt is handy to add a legend when there are multiple plots in the same figure. And we can use latex for math expressions.\n\nx = np.linspace(0, 2, 100)\n\nplt.plot(x, x, label=\"$y = x$\")\nplt.plot(x, np.sqrt(x), label=r\"$y = \\sqrt{x}$\")\nplt.plot(x, x*x, label=\"$y = x^2$\")\n\nplt.grid()\nplt.legend()\n\n# we can even give a title\n# the semicolon at the end of last line is used to supress the output of that expression\nplt.title(\"plot of $x$, $\\sqrt{x}$ and $x^2$\");\n\n\n\n\n\n\n\n\nNote that we write the last label as r\"$y = \\sqrt{x}$\". Notice the prefix r before the string. That indicates that it is a raw string. In regular strings, the \\ character has special meaning. For example \\n means a new line and \\t means a tab character.\nIf we write \"$\\theta$\", python intereprets the \\t in it as a tab and matplotlib only sees \"$&lt;tab&gt;heta$\". To avoid that we use raw strings whenever we are writing math expressions that require using \\ character.",
    "crumbs": [
      "Introduction to Python",
      "Plotting Graphs"
    ]
  },
  {
    "objectID": "python/plotting.html#customizing-ticks",
    "href": "python/plotting.html#customizing-ticks",
    "title": "Plotting Graphs",
    "section": "Customizing ticks",
    "text": "Customizing ticks\n\nx = np.linspace(0, 360, 100)\ny = np.sin(np.radians(x))\n\nplt.plot(x, y)\nplt.grid()\n\n\n\n\n\n\n\n\nWe can customize the ticks.\n\nx = np.linspace(0, 360, 100)\ny = np.sin(np.radians(x))\n\nplt.plot(x, y)\nplt.grid()\n\nplt.xticks([0, 90, 180, 270, 360]);\n\n\n\n\n\n\n\n\nWe can even give custom labels to the ticks.\n\nx = np.linspace(0, 360, 100)\ny = np.sin(np.radians(x))\n\nplt.plot(x, y)\nplt.grid()\n\nplt.xticks([0, 90, 180, 270, 360], \n           [r\"$0$\", r\"$\\frac{\\pi}{2}$\", r\"$\\pi$\", r\"$\\frac{3\\pi}{2}$\", r\"$2\\pi$\"])\n\n# and even axis labels\nplt.xlabel(r\"$\\theta$\")\nplt.ylabel(r\"$\\sin{\\theta}$\")\n\n# and title\nplt.title(r\"$y = \\sin{\\theta}$\");",
    "crumbs": [
      "Introduction to Python",
      "Plotting Graphs"
    ]
  },
  {
    "objectID": "python/plotting.html#saving-figures-as-images",
    "href": "python/plotting.html#saving-figures-as-images",
    "title": "Plotting Graphs",
    "section": "Saving figures as images",
    "text": "Saving figures as images\nMatplotlib allows exporting figures as images or pdf.\n\nx = np.linspace(0, 2, 100)\n\nplt.plot(x, x, label=\"$y = x$\")\nplt.plot(x, np.sqrt(x), label=r\"$y = \\sqrt{x}$\")\nplt.plot(x, x*x, label=\"$y = x^2$\")\n\nplt.grid()\nplt.legend()\n\n# we can even give a title\nplt.title(\"plot of $x$, $\\sqrt{x}$ and $x^2$\")\n\nplt.savefig(\"plots.png\")\nplt.savefig(\"plots.svg\")\nplt.savefig(\"plots.pdf\")\nprint(\"saved the figure as png, svg and pdf.\")\n\nsaved the figure as png, svg and pdf.\n\n\n\n\n\n\n\n\n\n\nProblem: Plot \\(\\sin{\\theta}\\) and \\(\\cos{\\theta}\\)\nPlot \\(\\sin{\\theta}\\) and \\(\\cos{\\theta}\\) in the same figure with \\(\\theta\\) going from \\(0\\) to \\(2\\pi\\).\nPlease use x ticks in increments of \\(\\frac{\\pi}{2}\\) and include legend.",
    "crumbs": [
      "Introduction to Python",
      "Plotting Graphs"
    ]
  },
  {
    "objectID": "python/plotting.html#subplots",
    "href": "python/plotting.html#subplots",
    "title": "Plotting Graphs",
    "section": "Subplots",
    "text": "Subplots\nFor complex visualizations, we need to display multiple sub plots and it is easy to do with matplotlib.\n\nfig, (ax0, ax1) = plt.subplots(1, 2)\n\nx = np.linspace(0, 2, 100)\nax0.plot(x, x)\nax0.set_title(\"$y = x$\")\nax0.grid()\n\nax1.plot(x, np.sqrt(x))\nax1.set_title(label=r\"$y = \\sqrt{x}$\")\nax1.grid()\n\n\n\n\n\n\n\n\nPlease note that the y-axis scale is different for both the graphs. We can force the same scale using sharey=True when creating subplots.\n\nfig, (ax0, ax1) = plt.subplots(1, 2, sharey=True)\n\nx = np.linspace(0, 2, 100)\nax0.plot(x, x)\nax0.set_title(\"$y = x$\")\nax0.grid()\n\nax1.plot(x, np.sqrt(x))\nax1.set_title(label=r\"$y = \\sqrt{x}$\")\nax1.grid()\n\n\n\n\n\n\n\n\n\n# specify custom fig size\nfig, (ax0, ax1) = plt.subplots(1, 2, sharey=True, figsize=(8, 4))\n\nx = np.linspace(0, 2, 100)\nax0.plot(x, x)\nax0.set_title(\"$y = x$\")\nax0.grid()\n\nax1.plot(x, np.sqrt(x))\nax1.set_title(label=r\"$y = \\sqrt{x}$\")\nax1.grid()\n\n\n\n\n\n\n\n\nWe can do the same with two rows and one column. In that case, we can sharex instead of y.\n\n# specify custom fig size\nfig, (ax0, ax1) = plt.subplots(2, 1, sharex=True, figsize=(4, 8))\n\nx = np.linspace(0, 2, 100)\nax0.plot(x, x)\nax0.set_title(\"$y = x$\")\nax0.grid()\n\nax1.plot(x, np.sqrt(x))\nax1.set_title(label=r\"$y = \\sqrt{x}$\")\nax1.grid()\n\n\n\n\n\n\n\n\nWe can even do a grid.\n\n# specify custom fig size\nfig, axs = plt.subplots(2, 2, sharex=True, sharey=True, figsize=(8, 8))\n\ndef plot(ax, x, y, title):\n    ax.plot(x, y)\n    ax.set_title(title)\n    ax.grid()\n    \nx = np.linspace(0, 2, 100)\nplot(axs[0, 0], x, x, r\"$y = x$\")\nplot(axs[0, 1], x, x*x, r\"$y = x^2$\")\nplot(axs[1, 0], x, np.sqrt(x), r\"$y = \\sqrt{x}$\")\nplot(axs[1, 1], x, 2**x, r\"$y = 2^x$\")\n\n# set super title\nplt.suptitle(\"Exploring subplots\");\n\n\n\n\n\n\n\n\n\nProblem: Plot \\(\\sin\\) and \\(\\cos\\) as subplots\nPlot \\(\\sin{\\theta}\\) and \\(\\cos{\\theta}\\) as subplots with \\(\\theta\\) going from \\(0\\) to \\(2\\pi\\).\nPlease use x ticks in increments of \\(\\frac{\\pi}{2}\\) and include titles for the subplots.",
    "crumbs": [
      "Introduction to Python",
      "Plotting Graphs"
    ]
  },
  {
    "objectID": "python/plotting.html#example-lassajous-curves",
    "href": "python/plotting.html#example-lassajous-curves",
    "title": "Plotting Graphs",
    "section": "Example: Lassajous Curves",
    "text": "Example: Lassajous Curves\nLassajous Curves are interesting mathematical curves that are generated using:\n\\(x = \\sin{(at + \\delta)}\\)\n\\(y = \\sin{(bt)}\\)\n\ndef lassajous(a, b, delta):\n    t = np.linspace(0, 2*np.pi, 1000)\n    x = np.sin(a*t+delta)\n    y = np.sin(b*t)\n\n    plt.figure(figsize=(6, 6))\n    plt.plot(x, y)\n    plt.grid()\n    \n    # show delta as a fraction of pi\n    delta_fraction = delta/np.pi\n    plt.title(rf\"$\\delta={delta_fraction}\\pi, a={a}, b={b}$\")\n\n\nlassajous(a=1, b=1, delta=0)\n\n\n\n\n\n\n\n\n\nlassajous(a=1, b=1, delta=np.pi/2)\n\n\n\n\n\n\n\n\n\nlassajous(a=1, b=1, delta=np.pi/4)\n\n\n\n\n\n\n\n\n\nlassajous(a=1, b=2, delta=np.pi/2)\n\n\n\n\n\n\n\n\n\nProblem: Table of Lassajous curves\nPlot the following lassajous curves using subplots. The row labels in the picture shows the ratio \\(a:b\\) and the column label shows the value of \\(\\delta\\).\nIt may be tricky to set the row and column labels as shown in the image. Specfify the value of \\(\\delta, a, b\\) for each subplot.",
    "crumbs": [
      "Introduction to Python",
      "Plotting Graphs"
    ]
  },
  {
    "objectID": "lecture-notes/2024-10-21/index.html",
    "href": "lecture-notes/2024-10-21/index.html",
    "title": "Introduction to Python (Mon Oct 21, 2024)",
    "section": "",
    "text": "1 + 2\n\n3\nprint(\"hello, world!\")\n\nhello, world!\nWe use markdown to write notes.\nPress Shift + Enter to execute a cell.\nYou can write heading using:",
    "crumbs": [
      "Lecture Notes",
      "Introduction to Python (Mon Oct 21, 2024)"
    ]
  },
  {
    "objectID": "lecture-notes/2024-10-21/index.html#heading-level-2",
    "href": "lecture-notes/2024-10-21/index.html#heading-level-2",
    "title": "Introduction to Python (Mon Oct 21, 2024)",
    "section": "Heading level 2",
    "text": "Heading level 2\nYou can also write math.\n$x^2 + y^2 = z^2$\n\n$\\Sigma_{x=0}^{n}{x} = \\frac{n (n+1)}{2}$\n\\(x^2 + y^2 = z^2\\)\n\\(\\Sigma_{x=0}^{n}{x} = \\frac{n (n+1)}{2}\\)",
    "crumbs": [
      "Lecture Notes",
      "Introduction to Python (Mon Oct 21, 2024)"
    ]
  },
  {
    "objectID": "lecture-notes/2024-10-21/index.html#quick-recap-of-python",
    "href": "lecture-notes/2024-10-21/index.html#quick-recap-of-python",
    "title": "Introduction to Python (Mon Oct 21, 2024)",
    "section": "Quick Recap of Python",
    "text": "Quick Recap of Python\n\nprint(\"hello, world!\")\n\nhello, world!",
    "crumbs": [
      "Lecture Notes",
      "Introduction to Python (Mon Oct 21, 2024)"
    ]
  },
  {
    "objectID": "lecture-notes/2024-10-21/index.html#python-datatypes",
    "href": "lecture-notes/2024-10-21/index.html#python-datatypes",
    "title": "Introduction to Python (Mon Oct 21, 2024)",
    "section": "Python Datatypes",
    "text": "Python Datatypes\n\nx = 1\nprint(x)\n\nx = \"hello\"\nprint(x)\n\n1\nhello\n\n\n\nIntegers\nPython has integers.\n\n7 + 2\n\n9\n\n\n\n7 - 2\n\n5\n\n\n\n7 * 2\n\n14\n\n\n\n7 / 2\n\n3.5\n\n\nTo perform integer division, use the // operator.\n\n7 // 2\n\n3\n\n\n\n2 ** 10\n\n1024\n\n\n\n2 ** 1000\n\n10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531468251871452856923140435984577574698574803934567774824230985421074605062371141877954182153046474983581941267398767559165543946077062914571196477686542167660429831652624386837205668069376\n\n\n\n\nFloating Point Numbers\nPython has floating point numbers too.\n\n1.2 + 2.3\n\n3.5\n\n\n\n0.1 + 0.2 \n\n0.30000000000000004\n\n\nPlease checkout https://0.30000000000000004.com/ for explanation.\n\n\nStrings\nStrings in Python can be closed in single quotes of double quotes.\n\n\"hello\"\n\n'hello'\n\n\n\n'world'\n\n'world'\n\n\n\n\"hello\" + \"world\"\n\n'helloworld'\n\n\n\n\"hello\" * 5\n\n'hellohellohellohellohello'\n\n\n\nline = \"-\" * 40\nprint(line)\n\n----------------------------------------\n\n\n\nlen(\"hello\")\n\n5\n\n\nProblem: Can you write a program to generate the following pattern using Python code? It has exactly 20 hyphen (-) characters.\n@-@-@-@-@-@-@-@-@-@-@-@-@-@-@-@-@-@-@-@-@\nProblem: Write a program to display a header and footer for name as shown below.\nname = \"Python\"\n# your code here\nWill produce:\n------\nPython\n------\nIf the value of name is “Bangalore”, the output would be:\n---------\nBangalore\n---------\n\nname = \"Python\"\n\n\nprint(name)\n\nPython\n\n\nPython supports multi-line strings too!\n\nmessage  = \"\"\"\nHello everyone,\n\nWelcome to the FCP class.\n\"\"\"\n\n\nmessage\n\n'\\nHello everyone,\\n\\nWelcome to the FCP class.\\n'\n\n\n\nprint(message)\n\n\nHello everyone,\n\nWelcome to the FCP class.\n\n\n\n\nString Formatting\nPython uses format strings for string formatting.\nThey are like regular strings, but start with a prefix f.\n\nname = \"Python\"\nmessage = f\"Hello {name}\"\nprint(message)\n\nHello Python\n\n\n\nname = \"Anand\"\n\n\nmessage = f\"\"\"\nDear {name},\n\nGood morning!\n\"\"\"\n\n\nprint(message)\n\n\nDear Anand,\n\nGood morning!\n\n\n\n\nn = 12\n\nfor i in range(1, 11):\n    print(f\"{n} * {i} = {n*i}\")\n\n12 * 1 = 12\n12 * 2 = 24\n12 * 3 = 36\n12 * 4 = 48\n12 * 5 = 60\n12 * 6 = 72\n12 * 7 = 84\n12 * 8 = 96\n12 * 9 = 108\n12 * 10 = 120\n\n\nThe string formatting supports aligning.\n\nn = 12\n\nfor i in range(1, 11):\n    print(f\"{n:2d} * {i:2d} = {n*i:3d}\")\n\n12 *  1 =  12\n12 *  2 =  24\n12 *  3 =  36\n12 *  4 =  48\n12 *  5 =  60\n12 *  6 =  72\n12 *  7 =  84\n12 *  8 =  96\n12 *  9 = 108\n12 * 10 = 120\n\n\nPython has good support for unicode text.\n\nname = \"ಭಾರತೀಯ ಅಂಕಿಅಂಶಗಳ ಸಂಸ್ಥೆ\"\n\n\nprint(\"Welcome to\", name)\n\nWelcome to ಭಾರತೀಯ ಅಂಕಿಅಂಶಗಳ ಸಂಸ್ಥೆ\n\n\n\nprint(\"\\u0c05\\u0c06\\u0c07\\u0c08\") # telugu\nprint(\"\\u0c85\\u0c86\\u0c87\\u0c88\") # kannada\nprint(\"\\u0905\\u0906\\u0907\\u0908\") # hindi\n\nఅఆఇఈ\nಅಆಇಈ\nअआइई\n\n\n\ncat = \"\\U0001f638\"\n\n\ncat\n\n'😸'\n\n\n\ncat * 10\n\n'😸😸😸😸😸😸😸😸😸😸'",
    "crumbs": [
      "Lecture Notes",
      "Introduction to Python (Mon Oct 21, 2024)"
    ]
  },
  {
    "objectID": "lecture-notes/2024-10-21/index.html#lists",
    "href": "lecture-notes/2024-10-21/index.html#lists",
    "title": "Introduction to Python (Mon Oct 21, 2024)",
    "section": "Lists",
    "text": "Lists\n\n[1, 2, 3, 4]\n\n[1, 2, 3, 4]\n\n\n\nx = [\"a\", \"b\", \"c\", \"d\"]\n\n\nx\n\n['a', 'b', 'c', 'd']\n\n\n\nlen(x)\n\n4\n\n\n\nnames = [\"Alice\", \"Bob\", \"Charlie\", \"Dave\"]\n\n\nnames\n\n['Alice', 'Bob', 'Charlie', 'Dave']\n\n\n\nlen(names)\n\n4\n\n\n\nnames[0]\n\n'Alice'\n\n\n\nnames[1]\n\n'Bob'\n\n\nWe can use for loop to iterate over a list.\n\nfor name in names:\n    print(\"Hello\", name)\n\nHello Alice\nHello Bob\nHello Charlie\nHello Dave\n\n\nHow to print them in the same line?\n\nfor name in names:\n    print(\"Hello\", name, end=\" * \")\n\nHello Alice * Hello Bob * Hello Charlie * Hello Dave * \n\n\n\nDictionaries\n\nphone_numbers = {\n    \"Alice\": 1234,\n    \"Bob\": 2345,\n    \"Charlie\": 3456\n}\n\n\nphone_numbers\n\n{'Alice': 1234, 'Bob': 2345, 'Charlie': 3456}\n\n\n\nphone_numbers[\"Alice\"]\n\n1234\n\n\n\nphone_numbers[\"Dave\"] = 4567\n\n\nphone_numbers\n\n{'Alice': 1234, 'Bob': 2345, 'Charlie': 3456, 'Dave': 4567}\n\n\n\nphone_numbers[\"Alice\"] = 1235\n\n\nphone_numbers\n\n{'Alice': 1235, 'Bob': 2345, 'Charlie': 3456, 'Dave': 4567}",
    "crumbs": [
      "Lecture Notes",
      "Introduction to Python (Mon Oct 21, 2024)"
    ]
  },
  {
    "objectID": "lecture-notes/2024-10-21/index.html#functions-methods-modules",
    "href": "lecture-notes/2024-10-21/index.html#functions-methods-modules",
    "title": "Introduction to Python (Mon Oct 21, 2024)",
    "section": "Functions, Methods & Modules",
    "text": "Functions, Methods & Modules\nPython has many built-in functions.\n\nprint(\"hello\")\n\nhello\n\n\n\nlen(\"hello\")\n\n5\n\n\n\nsum([1, 2, 3, 4, 5])\n\n15\n\n\nPython doesn’t allow operations on incompatible datatypes.\n\n1 + \"2\"\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[75], line 1\n----&gt; 1 1 + \"2\"\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n\n\n\nThe built-in functions int and str can be used to convert values to integer and string respectively.\n\nstr(1) + \"2\"\n\n'12'\n\n\n\n1 + int(\"2\")\n\n3\n\n\n\nExample: Counting the number of digits in a number\n\n12345\n\n12345\n\n\n\n2 ** 100\n\n1267650600228229401496703205376\n\n\n\n# how many digits  are there in number n?\nn = 2 ** 100\n\nlen(str(n))\n\n31\n\n\n\n\nWriting our own functions\n\ndef square(x):\n    return x*x\n\n\nsquare(4)\n\n16\n\n\nCan we convert the count digits example into a function?\n\ndef count_digits(n):\n    return len(str(n))\n\n\ncount_digits(2**100)\n\n31",
    "crumbs": [
      "Lecture Notes",
      "Introduction to Python (Mon Oct 21, 2024)"
    ]
  },
  {
    "objectID": "lecture-notes/2024-09-30/index.html",
    "href": "lecture-notes/2024-09-30/index.html",
    "title": "Unix Power Tools (Mon Sep 30, 2024)",
    "section": "",
    "text": "$ pwd\n/home/anand/github/anandology/isi-fcp\n$ cd data\n$ ls\nun-data.tsv  un.tsv\nWe are going to work with the un.tsv file.\nLet’s see the first few lines of that file.\n$ head un.tsv\ncountry region  lifeMale    lifeFemale  infantMortality GDPperCapita\nAfghanistan Asia    45.0    46.0    154 2848\nAlbania Europe  68.0    74.0    32  863\nAlgeria Africa  67.5    70.3    44  1531\nAngola  Africa  44.9    48.1    124 355\nArgentina   America 69.6    76.8    22  8055\nArmenia Europe  67.2    74.0    25  354\nAustralia   Oceania 75.4    81.2    6   20046\nAustria Europe  73.7    80.1    6   29006\nAzerbaijan  Asia    66.5    74.5    33  321\nAnd the last few lines.\n$ tail un.tsv\nUnited.States   America 73.4    80.1    7   26037\nUruguay America 69.6    76.1    17  5602\nUzbekistan  Asia    64.3    70.7    43  435\nVanuatu Oceania 65.5    69.5    38  1289\nVenezuela   America 70.0    75.7    21  3496\nViet.Nam    Asia    64.9    69.6    37  270\nYemen   Asia    57.4    58.4    80  732\nYugoslavia  Europe  69.8    75.3    19  1487\nZambia  Africa  42.2    43.7    103 382\nZimbabwe    Africa  47.6    49.4    68  786\nHow many lines/rows of data do we have? Let’s use the wordcount command wc to find it out.\n$ wc un.tsv\n 189 1134 6407 un.tsv\n\n$ wc -l un.tsv\n189 un.tsv\nIt has 189 lines. If we ignore the first line, which is the header, the file un.tsv has data for 188 countries.\nLet’s skip the header so that we can work just with the data.\n$ tail -n +2 un.tsv &gt; un-data.tsv\nThe above command takes the contents of un.tsv from the 2nd line onwards and writes the output to un-data.tsv.\nThe new file will not have the header and the number of lines will be less by one.\n$ head -5 un-data.tsv\nAfghanistan Asia    45.0    46.0    154 2848\nAlbania Europe  68.0    74.0    32  863\nAlgeria Africa  67.5    70.3    44  1531\nAngola  Africa  44.9    48.1    124 355\nArgentina   America 69.6    76.8    22  8055\nSee, the header is gone.\n$ wc -l *.tsv\n  188 un-data.tsv\n  189 un.tsv\n  377 total\nThe new file has one line less than the original file.\n\n\n\nWe can use the grep command for searching for patterns. The grep command supports regular expressions, but for now we’ll search only for simple strings.\nLet’s see some countries in Asia.\n$ grep Asia un-data.txt | head -5\nAfghanistan Asia    45.0    46.0    154 2848\nAzerbaijan  Asia    66.5    74.5    33  321\nBahrain Asia    71.1    75.3    18  9073\nBangladesh  Asia    58.1    58.2    78  280\nBhutan  Asia    51.6    54.9    104 166\nHow many countries are there in Asia?\n$ grep Asia un-data.tsv | wc -l\n46\nWe could also do the same using the -c option of grep command, which counts the number of matches.\n$ grep -c Asia un-data.tsv\n46\n\n\n\nWe can select a column from tabular data using the cut command.\nFor example, the following commmand select the 2nd column, the region.\n$ cut -f2 un-data.tsv | head -5\nAsia\nEurope\nAfrica\nAfrica\nAmerica\nWhat are the unique regions?\n$ cut -f2 un-data.tsv | sort | uniq\nAfrica\nAmerica\nAsia\nEurope\nOceania\nCan we get the counts for each region?\n$ cut -f2 un-data.tsv | sort | uniq -c\n     53 Africa\n     35 America\n     46 Asia\n     40 Europe\n     14 Oceania\n\n\nLet’s ask some intersting questions now.\nWhich countries have lowest infant mortality?\nInfant Mortality is the 5th column.\nLet’s select only the country and infant mortality columns first.\n$ cut -f1,5 un-data.tsv | head -5\nAfghanistan 154\nAlbania 32\nAlgeria 44\nAngola  124\nArgentina   22\nNow pipe this to sort to sort based on the last column.\n$ cut -f1,5 un-data.tsv | sort -k2 | head\nCroatia 10\nFrench.Polynesia    10\nNetherlands.Antilles    10\nCambodia    102\nZambia  103\nBhutan  104\nDjibouti    106\nEquatorial.Guinea   107\nEthiopia    107\nMalaysia    11\nThere seems to be an issue. Sort is sorting the numbers alphabetically, not numerically. Let’s fix this by asking sort to sort numerically by passing option -n.\n$ cut -f1,5 un-data.tsv | sort -k2 -n | head\nTonga   3\nJapan   4\nFinland 5\nHong.Kong   5\nIceland 5\nNorway  5\nSingapore   5\nSweden  5\nSwitzerland 5\nAustralia   6\nCan we find mean life expectency across male and female?\nTechnically, it is not possible to compute the combined mean from two means unless we know the population size for male and female. For simplicity, let’s assume the the population of male and female is the same. With that assumption, we can compute the combine mean by taking the average of the two values.\nWe are going to use awk for solving this.\nThe columns of interest are column 3 (lifeMale) and column 4 (lifeFemale).\n$ awk '{print $1, ($3+$4)/2;}' un-data.tsv | head\nAfghanistan 45.5\nAlbania 71\nAlgeria 68.9\nAngola 46.5\nArgentina 73.2\nArmenia 70.6\nAustralia 78.3\nAustria 76.9\nAzerbaijan 70.5\nBahamas 73.8\nList the rich countries\nLet’s consider the countries with GDP per Capita more than $20000 as rich countries.\n$ awk '$6 &gt; 20000 {print $1, $6;}' un-data.tsv\nAustralia 20046\nAustria 29006\nBelgium 26582\nDenmark 33191\nFinland 24453\nFrance 26444\nGermany 29632\nHong.Kong 22898\nIceland 26217\nJapan 41718\nLuxembourg 35109\nNetherlands 25635\nNorway 33734\nSingapore 25581\nSweden 26253\nSwitzerland 42416\nUnited.States 26037\nWhich countries have highest difference between the life expectency of male and female?\nLet’s look at the difference between those two values.\n$ awk ' {print $1, $3, $4, $3-$4;}' un-data.tsv | head\nAfghanistan 45.0 46.0 -1\nAlbania 68.0 74.0 -6\nAlgeria 67.5 70.3 -2.8\nAngola 44.9 48.1 -3.2\nArgentina 69.6 76.8 -7.2\nArmenia 67.2 74.0 -6.8\nAustralia 75.4 81.2 -5.8\nAustria 73.7 80.1 -6.4\nAzerbaijan 66.5 74.5 -8\nBahamas 70.5 77.1 -6.6\nWe need to find the countries with highest difference.\n$ awk ' {print $1, $3, $4, $3-$4;}' un-data.tsv | sort -k4 -nr | tail\nReunion 70.9 79.8 -8.9\nPoland 66.7 75.7 -9\nHungary 64.5 73.8 -9.3\nKazakhstan 62.8 72.5 -9.7\nUkraine 63.6 74.0 -10.4\nBelarus 64.4 74.8 -10.4\nLithuania 64.9 76.0 -11.1\nEstonia 63.9 75.0 -11.1\nLatvia 62.5 74.3 -11.8\nRussia 58.0 71.5 -13.5\nWhat is the average life expectency across countries?\nWe can’t really compute this becase we don’t have the population of each country. Just for this exercise, assume that the population of each country is the same.\n$ awk '{ total += $3; } END { print total/NR }' un-data.tsv\n63.5261\nWhat if we want to find the average male life expectency only in Asia?\n$ awk '$2 == \"Asia\" { total += $3; } END { print total/NR }' un-data.tsv\n15.9957\nSomething seems to be wrong. We are dividing the total by the total number of countries instead of the number of countries in Asia. For that we need to maintain another counter.\n$ awk '$2 == \"Asia\" { total += $3; countries++; } END { print total/countries; }' un-data.tsv\n65.3739\nAverage infant mortality by continent\nAgain, ignoring the population of each country for simiplicity.\n$ awk '{ total[$2] += $5; countries[$2]++} END {for (name in total) { print name, total[name]/countries[name]; }}' un-data.tsv\nAmerica 26.6571\nAfrica 86.3208\nAsia 43.7826\nEurope 11.575\nOceania 24.6429",
    "crumbs": [
      "Lecture Notes",
      "Unix Power Tools (Mon Sep 30, 2024)"
    ]
  },
  {
    "objectID": "lecture-notes/2024-09-30/index.html#previewing-data-using-head-and-tail",
    "href": "lecture-notes/2024-09-30/index.html#previewing-data-using-head-and-tail",
    "title": "Unix Power Tools (Mon Sep 30, 2024)",
    "section": "",
    "text": "$ pwd\n/home/anand/github/anandology/isi-fcp\n$ cd data\n$ ls\nun-data.tsv  un.tsv\nWe are going to work with the un.tsv file.\nLet’s see the first few lines of that file.\n$ head un.tsv\ncountry region  lifeMale    lifeFemale  infantMortality GDPperCapita\nAfghanistan Asia    45.0    46.0    154 2848\nAlbania Europe  68.0    74.0    32  863\nAlgeria Africa  67.5    70.3    44  1531\nAngola  Africa  44.9    48.1    124 355\nArgentina   America 69.6    76.8    22  8055\nArmenia Europe  67.2    74.0    25  354\nAustralia   Oceania 75.4    81.2    6   20046\nAustria Europe  73.7    80.1    6   29006\nAzerbaijan  Asia    66.5    74.5    33  321\nAnd the last few lines.\n$ tail un.tsv\nUnited.States   America 73.4    80.1    7   26037\nUruguay America 69.6    76.1    17  5602\nUzbekistan  Asia    64.3    70.7    43  435\nVanuatu Oceania 65.5    69.5    38  1289\nVenezuela   America 70.0    75.7    21  3496\nViet.Nam    Asia    64.9    69.6    37  270\nYemen   Asia    57.4    58.4    80  732\nYugoslavia  Europe  69.8    75.3    19  1487\nZambia  Africa  42.2    43.7    103 382\nZimbabwe    Africa  47.6    49.4    68  786\nHow many lines/rows of data do we have? Let’s use the wordcount command wc to find it out.\n$ wc un.tsv\n 189 1134 6407 un.tsv\n\n$ wc -l un.tsv\n189 un.tsv\nIt has 189 lines. If we ignore the first line, which is the header, the file un.tsv has data for 188 countries.\nLet’s skip the header so that we can work just with the data.\n$ tail -n +2 un.tsv &gt; un-data.tsv\nThe above command takes the contents of un.tsv from the 2nd line onwards and writes the output to un-data.tsv.\nThe new file will not have the header and the number of lines will be less by one.\n$ head -5 un-data.tsv\nAfghanistan Asia    45.0    46.0    154 2848\nAlbania Europe  68.0    74.0    32  863\nAlgeria Africa  67.5    70.3    44  1531\nAngola  Africa  44.9    48.1    124 355\nArgentina   America 69.6    76.8    22  8055\nSee, the header is gone.\n$ wc -l *.tsv\n  188 un-data.tsv\n  189 un.tsv\n  377 total\nThe new file has one line less than the original file.",
    "crumbs": [
      "Lecture Notes",
      "Unix Power Tools (Mon Sep 30, 2024)"
    ]
  },
  {
    "objectID": "lecture-notes/2024-09-30/index.html#searching-for-patterns-using-grep",
    "href": "lecture-notes/2024-09-30/index.html#searching-for-patterns-using-grep",
    "title": "Unix Power Tools (Mon Sep 30, 2024)",
    "section": "",
    "text": "We can use the grep command for searching for patterns. The grep command supports regular expressions, but for now we’ll search only for simple strings.\nLet’s see some countries in Asia.\n$ grep Asia un-data.txt | head -5\nAfghanistan Asia    45.0    46.0    154 2848\nAzerbaijan  Asia    66.5    74.5    33  321\nBahrain Asia    71.1    75.3    18  9073\nBangladesh  Asia    58.1    58.2    78  280\nBhutan  Asia    51.6    54.9    104 166\nHow many countries are there in Asia?\n$ grep Asia un-data.tsv | wc -l\n46\nWe could also do the same using the -c option of grep command, which counts the number of matches.\n$ grep -c Asia un-data.tsv\n46",
    "crumbs": [
      "Lecture Notes",
      "Unix Power Tools (Mon Sep 30, 2024)"
    ]
  },
  {
    "objectID": "lecture-notes/2024-09-30/index.html#selecting-and-sorting-data",
    "href": "lecture-notes/2024-09-30/index.html#selecting-and-sorting-data",
    "title": "Unix Power Tools (Mon Sep 30, 2024)",
    "section": "",
    "text": "We can select a column from tabular data using the cut command.\nFor example, the following commmand select the 2nd column, the region.\n$ cut -f2 un-data.tsv | head -5\nAsia\nEurope\nAfrica\nAfrica\nAmerica\nWhat are the unique regions?\n$ cut -f2 un-data.tsv | sort | uniq\nAfrica\nAmerica\nAsia\nEurope\nOceania\nCan we get the counts for each region?\n$ cut -f2 un-data.tsv | sort | uniq -c\n     53 Africa\n     35 America\n     46 Asia\n     40 Europe\n     14 Oceania\n\n\nLet’s ask some intersting questions now.\nWhich countries have lowest infant mortality?\nInfant Mortality is the 5th column.\nLet’s select only the country and infant mortality columns first.\n$ cut -f1,5 un-data.tsv | head -5\nAfghanistan 154\nAlbania 32\nAlgeria 44\nAngola  124\nArgentina   22\nNow pipe this to sort to sort based on the last column.\n$ cut -f1,5 un-data.tsv | sort -k2 | head\nCroatia 10\nFrench.Polynesia    10\nNetherlands.Antilles    10\nCambodia    102\nZambia  103\nBhutan  104\nDjibouti    106\nEquatorial.Guinea   107\nEthiopia    107\nMalaysia    11\nThere seems to be an issue. Sort is sorting the numbers alphabetically, not numerically. Let’s fix this by asking sort to sort numerically by passing option -n.\n$ cut -f1,5 un-data.tsv | sort -k2 -n | head\nTonga   3\nJapan   4\nFinland 5\nHong.Kong   5\nIceland 5\nNorway  5\nSingapore   5\nSweden  5\nSwitzerland 5\nAustralia   6\nCan we find mean life expectency across male and female?\nTechnically, it is not possible to compute the combined mean from two means unless we know the population size for male and female. For simplicity, let’s assume the the population of male and female is the same. With that assumption, we can compute the combine mean by taking the average of the two values.\nWe are going to use awk for solving this.\nThe columns of interest are column 3 (lifeMale) and column 4 (lifeFemale).\n$ awk '{print $1, ($3+$4)/2;}' un-data.tsv | head\nAfghanistan 45.5\nAlbania 71\nAlgeria 68.9\nAngola 46.5\nArgentina 73.2\nArmenia 70.6\nAustralia 78.3\nAustria 76.9\nAzerbaijan 70.5\nBahamas 73.8\nList the rich countries\nLet’s consider the countries with GDP per Capita more than $20000 as rich countries.\n$ awk '$6 &gt; 20000 {print $1, $6;}' un-data.tsv\nAustralia 20046\nAustria 29006\nBelgium 26582\nDenmark 33191\nFinland 24453\nFrance 26444\nGermany 29632\nHong.Kong 22898\nIceland 26217\nJapan 41718\nLuxembourg 35109\nNetherlands 25635\nNorway 33734\nSingapore 25581\nSweden 26253\nSwitzerland 42416\nUnited.States 26037\nWhich countries have highest difference between the life expectency of male and female?\nLet’s look at the difference between those two values.\n$ awk ' {print $1, $3, $4, $3-$4;}' un-data.tsv | head\nAfghanistan 45.0 46.0 -1\nAlbania 68.0 74.0 -6\nAlgeria 67.5 70.3 -2.8\nAngola 44.9 48.1 -3.2\nArgentina 69.6 76.8 -7.2\nArmenia 67.2 74.0 -6.8\nAustralia 75.4 81.2 -5.8\nAustria 73.7 80.1 -6.4\nAzerbaijan 66.5 74.5 -8\nBahamas 70.5 77.1 -6.6\nWe need to find the countries with highest difference.\n$ awk ' {print $1, $3, $4, $3-$4;}' un-data.tsv | sort -k4 -nr | tail\nReunion 70.9 79.8 -8.9\nPoland 66.7 75.7 -9\nHungary 64.5 73.8 -9.3\nKazakhstan 62.8 72.5 -9.7\nUkraine 63.6 74.0 -10.4\nBelarus 64.4 74.8 -10.4\nLithuania 64.9 76.0 -11.1\nEstonia 63.9 75.0 -11.1\nLatvia 62.5 74.3 -11.8\nRussia 58.0 71.5 -13.5\nWhat is the average life expectency across countries?\nWe can’t really compute this becase we don’t have the population of each country. Just for this exercise, assume that the population of each country is the same.\n$ awk '{ total += $3; } END { print total/NR }' un-data.tsv\n63.5261\nWhat if we want to find the average male life expectency only in Asia?\n$ awk '$2 == \"Asia\" { total += $3; } END { print total/NR }' un-data.tsv\n15.9957\nSomething seems to be wrong. We are dividing the total by the total number of countries instead of the number of countries in Asia. For that we need to maintain another counter.\n$ awk '$2 == \"Asia\" { total += $3; countries++; } END { print total/countries; }' un-data.tsv\n65.3739\nAverage infant mortality by continent\nAgain, ignoring the population of each country for simiplicity.\n$ awk '{ total[$2] += $5; countries[$2]++} END {for (name in total) { print name, total[name]/countries[name]; }}' un-data.tsv\nAmerica 26.6571\nAfrica 86.3208\nAsia 43.7826\nEurope 11.575\nOceania 24.6429",
    "crumbs": [
      "Lecture Notes",
      "Unix Power Tools (Mon Sep 30, 2024)"
    ]
  },
  {
    "objectID": "lecture-notes/01/index.html",
    "href": "lecture-notes/01/index.html",
    "title": "Lecture Notes 01",
    "section": "",
    "text": "This will be updated soon!",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes 01"
    ]
  },
  {
    "objectID": "lecture-notes/index.html",
    "href": "lecture-notes/index.html",
    "title": "Lecture Notes",
    "section": "",
    "text": "Lecture Notes\n\n\n\n\n\n\n\n\n\n\nLecture Notes - Mon Aug 12, 2024\n\n\n\n\n\n\n\n\n\n\n\nAug 12, 2024\n\n\nAnand Chitipothu\n\n\n\n\n\n\n\n\n\n\n\n\nLecture Notes 01\n\n\n\n\n\n\n\n\n\n\n\nJul 25, 2024\n\n\nJishnu Biswas\n\n\n\n\n\n\n\n\n\n\n\n\nLecture Notes 02\n\n\n\n\n\n\n\n\n\n\n\nJul 29, 2024\n\n\nAnand Chitipothu\n\n\n\n\n\n\n\n\n\n\n\n\nUnix Power Tools (Mon Sep 30, 2024)\n\n\n\n\n\n\n\n\n\n\n\nSep 30, 2024\n\n\nAnand Chitipothu\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Lecture Notes"
    ]
  },
  {
    "objectID": "git-slides/index.html#what-is-git",
    "href": "git-slides/index.html#what-is-git",
    "title": "Introduction to Git",
    "section": "What is Git?",
    "text": "What is Git?"
  },
  {
    "objectID": "git-slides/index.html#what-is-a-version-control-system",
    "href": "git-slides/index.html#what-is-a-version-control-system",
    "title": "Introduction to Git",
    "section": "What is a version control system?",
    "text": "What is a version control system?\n\n\nWhy do we need a version control system?\n\n\nTo avoid sistualtions like this.\n\n\nImage Credits: notFinal.doc by Jorge Cham, https://www.phdcomics.com"
  },
  {
    "objectID": "git-slides/index.html#git-vs.-github",
    "href": "git-slides/index.html#git-vs.-github",
    "title": "Introduction to Git",
    "section": "Git vs. Github",
    "text": "Git vs. Github\nGit is a version control system created by Linus Torvalds.\nGithub is a commercial service that offers git hosting in the cloud. It is very popular among the developers and it is almost the defacto standard for hosting code.\nIt is possible to use Git without using Github. However, for this course, we’ll use both Git and Github."
  },
  {
    "objectID": "git-slides/index.html#setting-up-git",
    "href": "git-slides/index.html#setting-up-git",
    "title": "Introduction to Git",
    "section": "Setting up Git",
    "text": "Setting up Git\nSetup git by configuring your name and email address in git.\n$ git config --global user.name \"Anand Chitipothu\"\n$ git config --global user.email \"anand@example.com\"\nPlease use your name and email address in the example above. Also, make sure the email address is same as what you have used when creating an account on github."
  },
  {
    "objectID": "git-slides/index.html#setup-ssh-keys",
    "href": "git-slides/index.html#setup-ssh-keys",
    "title": "Introduction to Git",
    "section": "Setup ssh-keys",
    "text": "Setup ssh-keys\n$ ssh-keygen -t ed25519 -C anand@my-laptop-name\nThat will output the following:\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/home/anand/.ssh/id_ed25519):\nJust press Enter.\nEnter passphrase (empty for no passphrase):\nIf you are using your own laptop, leave this empty. If you using the lab computer, pick a strong passphrase as that allows pusing any changes to your repositories on github."
  },
  {
    "objectID": "git-slides/index.html#create-a-repository-on-github",
    "href": "git-slides/index.html#create-a-repository-on-github",
    "title": "Introduction to Git",
    "section": "Create a Repository on Github",
    "text": "Create a Repository on Github\n\n\n\nLogin to github\nCreate a new repository with name git-practice.\nAdd Repository name and Description\nAnd select Add a README file."
  },
  {
    "objectID": "git-slides/index.html#clone-the-repo",
    "href": "git-slides/index.html#clone-the-repo",
    "title": "Introduction to Git",
    "section": "Clone the repo",
    "text": "Clone the repo\nClone the repo to your local computer.\ngit clone git@github.com:anandology/git-practice.git"
  },
  {
    "objectID": "git-slides/index.html#add-a-new-file-to-the-repo",
    "href": "git-slides/index.html#add-a-new-file-to-the-repo",
    "title": "Introduction to Git",
    "section": "Add a new file to the repo",
    "text": "Add a new file to the repo\n$ touch planets.md\n\n$ git status"
  },
  {
    "objectID": "ubuntu-wsl.html",
    "href": "ubuntu-wsl.html",
    "title": "Installing Ubuntu on Windows using WSL",
    "section": "",
    "text": "Windows Subsystem for Linux, shortly called as WSL, is a feature of Microsoft Windows that supports installing a linux distributting running inside Windows.\nFollow the following instructions to install Ubuntu on your Windows computer using WSL.\nPlease note that only Windows 10 version 2004 and higher or Windows 11 are supported.\nStep 1: Open Windows Power Shell\nEnter Windows Power Shell in the system search bar and open the application.\nStep 2: Install Ubuntu using WSL\nWSL is Windows Subsystem for Linux and it supports running Linux inside Windows. For this course we’ll be using the Linux distribution Ubuntu 24.04.\nRun the following command in the power shell to download and install Ubuntu.\nwsl --install\nPlease make sure you have a fast internet connection as this step downloads more than 1GB of data.\nStep 3: Open Ubuntu Terminal\nEnter Ubuntu in the system search bar and open the application.\nYou’ll should see a Ubuntu terminal.\nThat’s all! You are now ready to code.\n← Back to Software Setup\n\n\n\nHow to install Linux on Windows with WSL"
  },
  {
    "objectID": "ubuntu-wsl.html#references",
    "href": "ubuntu-wsl.html#references",
    "title": "Installing Ubuntu on Windows using WSL",
    "section": "",
    "text": "How to install Linux on Windows with WSL"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fundamentals of Computing and Programming",
    "section": "",
    "text": "Welcome to the Fundamentals of Computing and Programming course.\nPlease look at the course page on ISI Bangalore website for syllabus and other details.",
    "crumbs": [
      "Fundamentals of Computing and Programming"
    ]
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Fundamentals of Computing and Programming",
    "section": "Introduction",
    "text": "Introduction\nThis course uses unix environment for writing, compiling and executing c programs.\nIf you are using Linux or Mac, you probably don’t need to setup anything. If you are on windows, you can set up Ubuntu using WSL and the instructions are provided in the Software Setup page.",
    "crumbs": [
      "Fundamentals of Computing and Programming"
    ]
  },
  {
    "objectID": "index.html#source-code",
    "href": "index.html#source-code",
    "title": "Fundamentals of Computing and Programming",
    "section": "Source Code",
    "text": "Source Code\nThe source code for this website is available at the following github repository:\nhttps://github.com/anandology/isi-fcp",
    "crumbs": [
      "Fundamentals of Computing and Programming"
    ]
  },
  {
    "objectID": "index.html#credits",
    "href": "index.html#credits",
    "title": "Fundamentals of Computing and Programming",
    "section": "Credits",
    "text": "Credits\nThis course is taught of Prof. Jishnu Biswas, ISI Bangalore.\nThis website is setup by Anand Chitipothu.",
    "crumbs": [
      "Fundamentals of Computing and Programming"
    ]
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Fundamentals of Computing and Programming",
    "section": "License",
    "text": "License\nThis work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.\n\n\n\nCC BY-SA 4.0",
    "crumbs": [
      "Fundamentals of Computing and Programming"
    ]
  },
  {
    "objectID": "problem-sets/index.html",
    "href": "problem-sets/index.html",
    "title": "Problem Sets",
    "section": "",
    "text": "Problem Sets\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nCategories\n\n\n\n\n\n\nProblem Set 1\n\n\nCSketch\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Problem Sets"
    ]
  }
]