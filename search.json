[
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Software Setup",
    "section": "",
    "text": "This page explains how to setup the coding environment for Ubuntu.\n\n\n\n\n\n\nNote\n\n\n\nIf you are have a computer running Windows, please follow instructions on Installing Ubuntu on Windows using WSL before moving further.\n\n\n\n\nFor this course, we support only Ubuntu distribution of Linux. If you have any other distribution, please find out how to install GCC compiler.\nRun the following commands to install C compiler and other build tools.\nsudo apt-get update\nsudo apt-get install build-essential\n\n\n\nVisual Studio Code (vscode) is the recommended editor for this course. Please install it from Visual Studio Code Downloads page.\n\n\n\n\n\n\nWarning\n\n\n\nIf you are on Ubuntu 18.04, please install an older version by running the following commands.\nwget https://update.code.visualstudio.com/1.75.1/linux-deb-x64/stable\nsudo dpkg -i code_1.75.1-1675893397_amd64.deb\n\n\n\n\n\nFollow the following instructions to install SVG Extension to preview SVG files directly in vscode. SVG is an image format that we are going to use in the course.\n\nOpen vscode and press Ctrl+P\nType ext install jock.svg and press Enter\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nYou need to install WSL extension only if you are running Windows.\n\n\nFollow the following instructions to install the extension.\n\nOpen vscode and press Ctrl+P\nType ext install ms-vscode-remote.remote-wsl and press Enter\n\n\n\n\nIt is recommended to create a new directory for all your programs in this course. Let’s call it computing.\nOpen your terminal and run the following command.\nmkdir computing\nYou can change the current directory to that using:\ncd computing\n\n\n\nCSketch is a library for drawing simple shapes in C programming language and it is required for this course.\nRun the following command in your terminal to install it.\ncurl https://anandology.github.io/csketch/install.sh | bash\nThis will download the csketch library to your current directory and also adds a sample file circle.c and a Makefile to build your C code.\n\n\n\nOpen your computing directory in vscode by running code . in your terminal.\n$ code .\nIf you are on Windows, you should run this in Ubuntu running in WSL. The WSL Extension of vscode would have made the code command available in your environment.\nOnce the vscode is open, open a terminal from the menu View -&gt; Terminal. You can also open the same using keyboard shortcut Ctrl + `.\n\n\n\nIn the terminal, run make to compile the circle.c file in the current directory.\n$ make\ngcc -I sketch -L sketch circle.c  -lm -l sketch -o circle\nThat compiled the circle.c and created executable file circle.\nRun the circle program.\n$ ./circle\nThat would have created a file circle.svg. Select the circle.svg file in the left sidebar to open it now press the preview button.\n\n\n\nOnce you click preview, you’ll be able to see the image in the right.",
    "crumbs": [
      "Software Setup"
    ]
  },
  {
    "objectID": "setup.html#install-c-compiler",
    "href": "setup.html#install-c-compiler",
    "title": "Software Setup",
    "section": "",
    "text": "For this course, we support only Ubuntu distribution of Linux. If you have any other distribution, please find out how to install GCC compiler.\nRun the following commands to install C compiler and other build tools.\nsudo apt-get update\nsudo apt-get install build-essential",
    "crumbs": [
      "Software Setup"
    ]
  },
  {
    "objectID": "setup.html#install-visual-studio-code",
    "href": "setup.html#install-visual-studio-code",
    "title": "Software Setup",
    "section": "",
    "text": "Visual Studio Code (vscode) is the recommended editor for this course. Please install it from Visual Studio Code Downloads page.\n\n\n\n\n\n\nWarning\n\n\n\nIf you are on Ubuntu 18.04, please install an older version by running the following commands.\nwget https://update.code.visualstudio.com/1.75.1/linux-deb-x64/stable\nsudo dpkg -i code_1.75.1-1675893397_amd64.deb",
    "crumbs": [
      "Software Setup"
    ]
  },
  {
    "objectID": "setup.html#install-svg-extension-in-vscode",
    "href": "setup.html#install-svg-extension-in-vscode",
    "title": "Software Setup",
    "section": "",
    "text": "Follow the following instructions to install SVG Extension to preview SVG files directly in vscode. SVG is an image format that we are going to use in the course.\n\nOpen vscode and press Ctrl+P\nType ext install jock.svg and press Enter",
    "crumbs": [
      "Software Setup"
    ]
  },
  {
    "objectID": "setup.html#install-wsl-extension-in-vscode",
    "href": "setup.html#install-wsl-extension-in-vscode",
    "title": "Software Setup",
    "section": "",
    "text": "Warning\n\n\n\nYou need to install WSL extension only if you are running Windows.\n\n\nFollow the following instructions to install the extension.\n\nOpen vscode and press Ctrl+P\nType ext install ms-vscode-remote.remote-wsl and press Enter",
    "crumbs": [
      "Software Setup"
    ]
  },
  {
    "objectID": "setup.html#make-a-directory-for-your-code",
    "href": "setup.html#make-a-directory-for-your-code",
    "title": "Software Setup",
    "section": "",
    "text": "It is recommended to create a new directory for all your programs in this course. Let’s call it computing.\nOpen your terminal and run the following command.\nmkdir computing\nYou can change the current directory to that using:\ncd computing",
    "crumbs": [
      "Software Setup"
    ]
  },
  {
    "objectID": "setup.html#download-csketch-library",
    "href": "setup.html#download-csketch-library",
    "title": "Software Setup",
    "section": "",
    "text": "CSketch is a library for drawing simple shapes in C programming language and it is required for this course.\nRun the following command in your terminal to install it.\ncurl https://anandology.github.io/csketch/install.sh | bash\nThis will download the csketch library to your current directory and also adds a sample file circle.c and a Makefile to build your C code.",
    "crumbs": [
      "Software Setup"
    ]
  },
  {
    "objectID": "setup.html#build-your-first-program",
    "href": "setup.html#build-your-first-program",
    "title": "Software Setup",
    "section": "",
    "text": "Open your computing directory in vscode by running code . in your terminal.\n$ code .\nIf you are on Windows, you should run this in Ubuntu running in WSL. The WSL Extension of vscode would have made the code command available in your environment.\nOnce the vscode is open, open a terminal from the menu View -&gt; Terminal. You can also open the same using keyboard shortcut Ctrl + `.\n\n\n\nIn the terminal, run make to compile the circle.c file in the current directory.\n$ make\ngcc -I sketch -L sketch circle.c  -lm -l sketch -o circle\nThat compiled the circle.c and created executable file circle.\nRun the circle program.\n$ ./circle\nThat would have created a file circle.svg. Select the circle.svg file in the left sidebar to open it now press the preview button.\n\n\n\nOnce you click preview, you’ll be able to see the image in the right.",
    "crumbs": [
      "Software Setup"
    ]
  },
  {
    "objectID": "lecture-notes/index.html",
    "href": "lecture-notes/index.html",
    "title": "Lecture Notes",
    "section": "",
    "text": "Lecture Notes\n\n\n\n\n\n\n\n\n\n\nLecture Notes - Mon Aug 12, 2024\n\n\n\n\n\n\n\n\n\n\n\nAug 12, 2024\n\n\nAnand Chitipothu\n\n\n\n\n\n\n\n\n\n\n\n\nLecture Notes 01\n\n\n\n\n\n\n\n\n\n\n\nJul 25, 2024\n\n\nJishnu Biswas\n\n\n\n\n\n\n\n\n\n\n\n\nLecture Notes 02\n\n\n\n\n\n\n\n\n\n\n\nJul 29, 2024\n\n\nAnand Chitipothu\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Lecture Notes"
    ]
  },
  {
    "objectID": "lecture-notes/01/index.html",
    "href": "lecture-notes/01/index.html",
    "title": "Lecture Notes 01",
    "section": "",
    "text": "This will be updated soon!",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes 01"
    ]
  },
  {
    "objectID": "ubuntu-wsl.html",
    "href": "ubuntu-wsl.html",
    "title": "Installing Ubuntu on Windows using WSL",
    "section": "",
    "text": "Windows Subsystem for Linux, shortly called as WSL, is a feature of Microsoft Windows that supports installing a linux distributting running inside Windows.\nFollow the following instructions to install Ubuntu on your Windows computer using WSL.\nPlease note that only Windows 10 version 2004 and higher or Windows 11 are supported.\nStep 1: Open Windows Power Shell\nEnter Windows Power Shell in the system search bar and open the application.\nStep 2: Install Ubuntu using WSL\nWSL is Windows Subsystem for Linux and it supports running Linux inside Windows. For this course we’ll be using the Linux distribution Ubuntu 24.04.\nRun the following command in the power shell to download and install Ubuntu.\nwsl --install\nPlease make sure you have a fast internet connection as this step downloads more than 1GB of data.\nStep 3: Open Ubuntu Terminal\nEnter Ubuntu in the system search bar and open the application.\nYou’ll should see a Ubuntu terminal.\nThat’s all! You are now ready to code.\n← Back to Software Setup\n\n\n\nHow to install Linux on Windows with WSL"
  },
  {
    "objectID": "ubuntu-wsl.html#references",
    "href": "ubuntu-wsl.html#references",
    "title": "Installing Ubuntu on Windows using WSL",
    "section": "",
    "text": "How to install Linux on Windows with WSL"
  },
  {
    "objectID": "cmdline.html",
    "href": "cmdline.html",
    "title": "Introduction to Unix Command Line",
    "section": "",
    "text": "The primary mode of interacting with a unix system is using the command line. While it may look like using a graphical user interface is lot easier to use, it is not usually optimal in most of the cases. While the command-line interface may have steeper learning curve, the ability to automate things easily pays off the effort very quickly.\nLet me recall the quote that we have discussed from SICP.\n\nEvery powerful language has three mechanisms for accomplishing this:\n\nprimitive expressions, which represent the simplest entities the language is concerned with,\nmeans of combination, by which compound elements are built from simpler ones, and\nmeans of abstraction, by which compound elements can be named and manipulated as units.\n\n\n– Structure and Interpretation of Computer Programs\nConsider the task of creating a mp4 video from frame images generated by your C program, like some of you have done. It requires running the program, converting each of the SVG image generated by the program into png and combining all of them together to make it into a video.\nThe typical way of doing this using a graphical user interface would really cumbersome. That may involve doing something like this:\n\nRun your program\nOpen the image converter program, select an svg file and press a button to convert it to png and repeat it for each one of the images\nOpen the video maker program, select all the png files that need to be included, press a button to make the video\n\nIt is really tedious to do this again and again. If we look this in the lens SICP, the primitive expressions of this system are your program, image converter and video maker. The only way to combine them is by doing each one of them one after the other and there is no way to abstrat them, give it a name and use like a single operation.\nWhen you think of command line, you can take combine the primitive commands by running them one after the other, but you can also abstract them and give it a name by making a script and running just that script.\nIn this lesson, we’ll learn the how command-line interface works and how to use it effectively.\n\n\nPlease install the required packages to install the commands used in this lesson.\n$ sudo apt-get -y install coreutils figlet cowsay\n\n\n\nLet’s start with priting a hello message.\nOpen your terminal and type echo hello world. You’ll see the message hello world printed back.\n$ echo hello world\nhello world\n\n\n\nOne of the beautiful things about Unix command line is the ability to connect the output of one command as input as another one.\nWe’ve seen two command seq and figlet. Wouldn’t it be nice if we can print the numbers as large characters using figlet? For this we need to connect the output of seq to the input of figlet.\n$ seq 5 | figlet\n _\n/ |\n| |\n| |\n|_|\n\n ____\n|___ \\\n  __) |\n / __/\n|_____|\n\n _____\n|___ /\n  |_ \\\n ___) |\n|____/\n\n _  _\n| || |\n| || |_\n|__   _|\n   |_|\n\n ____\n| ___|\n|___ \\\n ___) |\n|____/\nThe | charater creates a pipeline connecting output of the first command to the input of the second command.\n\n\n\n\n\nnumbers.sh\n\nn=$1\nseq $n | figlet\n\nThe $1 is the first argument that is passed to the script.\nRemember that in a shell script, space around = are not accepted. So n=$1 is valid, but n = $1 is invalid. We’ll learn more about the nuances of shell scripts later.\nAnd you can run it using: bash numbers.sh\n$ bash numbers.sh 2\n _\n/ |\n| |\n| |\n|_|\n\n ____\n|___ \\\n  __) |\n / __/\n|_____|\n\n\n\n\nThe Unix Episode | Episode 32 of Everything is Everything\nThe Unix Shell - Software Carpentry\nVI Tutorial for Beginners - Tyler’s Guides",
    "crumbs": [
      "Introduction to Unix Command Line"
    ]
  },
  {
    "objectID": "cmdline.html#quick-setup",
    "href": "cmdline.html#quick-setup",
    "title": "Introduction to Unix Command Line",
    "section": "",
    "text": "Please install the required packages to install the commands used in this lesson.\n$ sudo apt-get -y install coreutils figlet cowsay",
    "crumbs": [
      "Introduction to Unix Command Line"
    ]
  },
  {
    "objectID": "cmdline.html#getting-started",
    "href": "cmdline.html#getting-started",
    "title": "Introduction to Unix Command Line",
    "section": "",
    "text": "Let’s start with priting a hello message.\nOpen your terminal and type echo hello world. You’ll see the message hello world printed back.\n$ echo hello world\nhello world",
    "crumbs": [
      "Introduction to Unix Command Line"
    ]
  },
  {
    "objectID": "cmdline.html#pipes",
    "href": "cmdline.html#pipes",
    "title": "Introduction to Unix Command Line",
    "section": "",
    "text": "One of the beautiful things about Unix command line is the ability to connect the output of one command as input as another one.\nWe’ve seen two command seq and figlet. Wouldn’t it be nice if we can print the numbers as large characters using figlet? For this we need to connect the output of seq to the input of figlet.\n$ seq 5 | figlet\n _\n/ |\n| |\n| |\n|_|\n\n ____\n|___ \\\n  __) |\n / __/\n|_____|\n\n _____\n|___ /\n  |_ \\\n ___) |\n|____/\n\n _  _\n| || |\n| || |_\n|__   _|\n   |_|\n\n ____\n| ___|\n|___ \\\n ___) |\n|____/\nThe | charater creates a pipeline connecting output of the first command to the input of the second command.",
    "crumbs": [
      "Introduction to Unix Command Line"
    ]
  },
  {
    "objectID": "cmdline.html#shell-scripts",
    "href": "cmdline.html#shell-scripts",
    "title": "Introduction to Unix Command Line",
    "section": "",
    "text": "numbers.sh\n\nn=$1\nseq $n | figlet\n\nThe $1 is the first argument that is passed to the script.\nRemember that in a shell script, space around = are not accepted. So n=$1 is valid, but n = $1 is invalid. We’ll learn more about the nuances of shell scripts later.\nAnd you can run it using: bash numbers.sh\n$ bash numbers.sh 2\n _\n/ |\n| |\n| |\n|_|\n\n ____\n|___ \\\n  __) |\n / __/\n|_____|",
    "crumbs": [
      "Introduction to Unix Command Line"
    ]
  },
  {
    "objectID": "cmdline.html#references",
    "href": "cmdline.html#references",
    "title": "Introduction to Unix Command Line",
    "section": "",
    "text": "The Unix Episode | Episode 32 of Everything is Everything\nThe Unix Shell - Software Carpentry\nVI Tutorial for Beginners - Tyler’s Guides",
    "crumbs": [
      "Introduction to Unix Command Line"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "lecture-notes/2024-08-12/index.html",
    "href": "lecture-notes/2024-08-12/index.html",
    "title": "Lecture Notes - Mon Aug 12, 2024",
    "section": "",
    "text": "Please see lesson Introduction to Unix Command Line.",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes - Mon Aug 12, 2024"
    ]
  },
  {
    "objectID": "lecture-notes/2024-08-12/index.html#quick-setup",
    "href": "lecture-notes/2024-08-12/index.html#quick-setup",
    "title": "Lecture Notes - Mon Aug 12, 2024",
    "section": "Quick Setup",
    "text": "Quick Setup\nPlease install the required packages to install the commands used in this session.\n$ sudo apt-get -y install coreutils figlet cowsay wbritish",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes - Mon Aug 12, 2024"
    ]
  },
  {
    "objectID": "lecture-notes/2024-08-12/index.html#the-log",
    "href": "lecture-notes/2024-08-12/index.html#the-log",
    "title": "Lecture Notes - Mon Aug 12, 2024",
    "section": "The log",
    "text": "The log\nHere is the log of all the commands tried in the class.\nLet’s start with printing a hello world message.\n$ echo hello world\nhello world\nThe echo command takes one or more command-line arguments and prints all of them as output. In this case echo is the name of the program and hello and world are two arguments passed to it.\nWe could try the date command to find the current date and time.\n$ date\nMonday 12 August 2024 11:33:05 AM IST\n$ date\nMonday 12 August 2024 11:33:07 AM IST\nNow, let’s try something fun!\n$ figlet hello world\n _          _ _                            _     _\n| |__   ___| | | ___   __      _____  _ __| | __| |\n| '_ \\ / _ \\ | |/ _ \\  \\ \\ /\\ / / _ \\| '__| |/ _` |\n| | | |  __/ | | (_) |  \\ V  V / (_) | |  | | (_| |\n|_| |_|\\___|_|_|\\___/    \\_/\\_/ \\___/|_|  |_|\\__,_|\nFiglet is a program that prints the given text as large characters made up of ordinary screen characters.\nPlease try figlet with some other arguments and see what happens.\nAlso note that if you are using figlet with any special characters, make sure you enclose the arguments pased to figlet in single quotes. If you don’t do that then shell may interpret them differently and do some weird things.\nFor example, if you call figlet with a * b as argument:\n$ figlet a * b\n\n              _          _             _          _\n  __ _    ___(_)_ __ ___| | ___    ___(_)_ __ ___| | ___   ___\n / _` |  / __| | '__/ __| |/ _ \\  / __| | '__/ __| |/ _ \\ / __|\n| (_| | | (__| | | | (__| |  __/ | (__| | | | (__| |  __/| (__\n \\__,_|  \\___|_|_|  \\___|_|\\___|  \\___|_|_|  \\___|_|\\___(_)___|\n\n      _          _\n  ___(_)_ __ ___| | ___   _____   ____ _\n / __| | '__/ __| |/ _ \\ / __\\ \\ / / _` |\n| (__| | | | (__| |  __/_\\__ \\\\ V / (_| |\n \\___|_|_|  \\___|_|\\___(_)___/ \\_/ \\__, |\n                                   |___/\n\n __  __       _         __ _ _\n|  \\/  | __ _| | _____ / _(_) | ___\n| |\\/| |/ _` | |/ / _ \\ |_| | |/ _ \\\n| |  | | (_| |   &lt;  __/  _| | |  __/\n|_|  |_|\\__,_|_|\\_\\___|_| |_|_|\\___|\n\n                      _                        _          _\n             _        _       _       _\n ___| | _____| |_ ___| |__   | |__\n/ __| |/ / _ \\ __/ __| '_ \\  | '_ \\\n\\__ \\   &lt;  __/ || (__| | | | | |_) |\n|___/_|\\_\\___|\\__\\___|_| |_| |_.__/\n                                                          _\nThe special character * means all the files in the current directory. You can verify that by running echo *.\n$ echo *\ncircle circle.c circle.svg Makefile sketch\nWe can enclose the arguments in single quotes to ignore the special characters.\n$ figlet 'a * b'\n                _\n  __ _  __/\\__ | |__\n / _` | \\    / | '_ \\\n| (_| | /_  _\\ | |_) |\n \\__,_|   \\/   |_.__/\nNow, let’s try a new command seq. The seq command takes a number n as argument and prints all numbers from 1 to n.\n$ seq 5\n1\n2\n3\n4\n5\nHow do we combine the seq and figlet program together so that the output of seq is passed as input to figlet? We just use the | character.\n$ seq 5 | figlet\n _\n/ |\n| |\n| |\n|_|\n\n ____\n|___ \\\n  __) |\n / __/\n|_____|\n\n _____\n|___ /\n  |_ \\\n ___) |\n|____/\n\n _  _\n| || |\n| || |_\n|__   _|\n   |_|\n\n ____\n| ___|\n|___ \\\n ___) |\n|____/\nThere is another interesting program called cowsay. It is usually not in the PATH (more about this later) so we need to give the full path for it to work. It is at path /usr/games/cowsay.\n$ /usr/games/cowsay hello world\n _____________\n&lt; hello world &gt;\n -------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\nWe could use a different animal by specifing the cowfile using option -f.\n$ /usr/games/cowsay -f tux hello world\n _____________\n&lt; hello world &gt;\n -------------\n   \\\n    \\\n        .--.\n       |o_o |\n       |:_/ |\n      //   \\ \\\n     (|     | )\n    /'\\_   _/`\\\n    \\___)=(___/\n$ seq 5 | /usr/games/cowsay\n ___________\n&lt; 1 2 3 4 5 &gt;\n -----------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n$ seq 5 | /usr/games/cowsay -n\n ___\n/ 1 \\\n| 2 |\n| 3 |\n| 4 |\n\\ 5 /\n ---\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n$ seq 2 | figlet | /usr/games/cowsay -n\n _________\n/  _      \\\n| / |     |\n| | |     |\n| | |     |\n| |_|     |\n|         |\n|  ____   |\n| |___ \\  |\n|   __) | |\n|  / __/  |\n| |_____| |\n\\         /\n ---------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n$ echo hello | figlet | /usr/games/cowsay -n\n ________________________\n/  _          _ _        \\\n| | |__   ___| | | ___   |\n| | '_ \\ / _ \\ | |/ _ \\  |\n| | | | |  __/ | | (_) | |\n| |_| |_|\\___|_|_|\\___/  |\n\\                        /\n ------------------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n$\n$ figlet hello\n _          _ _\n| |__   ___| | | ___\n| '_ \\ / _ \\ | |/ _ \\\n| | | |  __/ | | (_) |\n|_| |_|\\___|_|_|\\___/\n\n$ figlet\nhello\n _          _ _\n| |__   ___| | | ___\n| '_ \\ / _ \\ | |/ _ \\\n| | | |  __/ | | (_) |\n|_| |_|\\___|_|_|\\___/\n\nworld\n                    _     _\n__      _____  _ __| | __| |\n\\ \\ /\\ / / _ \\| '__| |/ _` |\n \\ V  V / (_) | |  | | (_| |\n  \\_/\\_/ \\___/|_|  |_|\\__,_|\n\n$ /usr/games/cowsay -n\nhello\nworld\n _______\n/ hello \\\n\\ world /\n -------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n$\n$ figlet hello\n _          _ _\n| |__   ___| | | ___\n| '_ \\ / _ \\ | |/ _ \\\n| | | |  __/ | | (_) |\n|_| |_|\\___|_|_|\\___/\n\n$ figlet -f slant hello\n    __         ____\n   / /_  ___  / / /___\n  / __ \\/ _ \\/ / / __ \\\n / / / /  __/ / / /_/ /\n/_/ /_/\\___/_/_/\\____/\n\n$ figlet -f lean hello\n\n    _/                  _/  _/\n   _/_/_/      _/_/    _/  _/    _/_/\n  _/    _/  _/_/_/_/  _/  _/  _/    _/\n _/    _/  _/        _/  _/  _/    _/\n_/    _/    _/_/_/  _/  _/    _/_/\n\n\n$ pwd\n/home/anand/github/anandology/isi-fcp/computing\n$ cd\n$ pwd\n/home/anand\n$ cd /home/anand/github/anandology/isi-fcp/computing\n$\n$ ls\ncircle      Makefile          moving-circle.c    sketch\ncircle.c    moving-circle     moving-circle.mp4\ncircle.svg  moving-circle2    moving-circle.svg\nframes      moving-circle2.c  numbers.sh\n$ cat numbers.sh\nn=$1\nseq $n | figlet$\n$\n$ cat numbers.sh\nn=$1\nseq $n | figlet\n$ cat\nhello\nhello\n$ ls -l\ntotal 168\n-rwxrwxr-x 1 anand anand 16976 Jul 30 21:54 circle\n-rw-rw-r-- 1 anand anand   196 Jul 29 00:16 circle.c\n-rw-rw-r-- 1 anand anand  6682 Aug  5 10:55 circle.svg\ndrwxrwxr-x 2 anand anand 32768 Aug  6 17:51 frames\n-rw-rw-r-- 1 anand anand   575 Aug  6 17:46 Makefile\n-rwxrwxr-x 1 anand anand 17152 Aug  6 17:50 moving-circle\n-rwxrwxr-x 1 anand anand 17024 Aug  6 17:32 moving-circle2\n-rw-rw-r-- 1 anand anand   433 Aug  6 17:32 moving-circle2.c\n-rw-rw-r-- 1 anand anand  1034 Aug  6 18:11 moving-circle.c\n-rw-rw-r-- 1 anand anand 40176 Aug  6 17:52 moving-circle.mp4\n-rw-rw-r-- 1 anand anand   359 Aug  6 17:36 moving-circle.svg\n-rw-rw-r-- 1 anand anand    21 Aug 12 12:07 numbers.sh\nlrwxrwxrwx 1 anand anand     9 Aug  5 10:55 sketch -&gt; ../sketch\n$ whoami\nanand\n$\n$ figlet sketch\n     _        _       _\n ___| | _____| |_ ___| |__\n/ __| |/ / _ \\ __/ __| '_ \\\n\\__ \\   &lt;  __/ || (__| | | |\n|___/_|\\_\\___|\\__\\___|_| |_|\n\n$ figlet -f slant sketch\n         __        __       __\n   _____/ /_____  / /______/ /_\n  / ___/ //_/ _ \\/ __/ ___/ __ \\\n (__  ) ,&lt; /  __/ /_/ /__/ / / /\n/____/_/|_|\\___/\\__/\\___/_/ /_/\n\n$ figlet -f slant sketch &gt; sketch.txt\n$ pwd\n/home/anand/github/anandology/isi-fcp/computing\n$ ls\ncircle      Makefile          moving-circle.c    sketch\ncircle.c    moving-circle     moving-circle.mp4  sketch.txt\ncircle.svg  moving-circle2    moving-circle.svg\nframes      moving-circle2.c  numbers.sh\n$ cat sketch.txt\n         __        __       __\n   _____/ /_____  / /______/ /_\n  / ___/ //_/ _ \\/ __/ ___/ __ \\\n (__  ) ,&lt; /  __/ /_/ /__/ / / /\n/____/_/|_|\\___/\\__/\\___/_/ /_/\n\n$ seq\n$ seq 1000000 &gt; 1m.txt\n$ ls -l *.txt\n-rw-rw-r-- 1 anand anand 6888896 Aug 12 12:15 1m.txt\n-rw-rw-r-- 1 anand anand     198 Aug 12 12:12 sketch.txt\n$ wc -l 1m.txt\n1000000 1m.txt\n\n$ cat sketch.txt\n         __        __       __\n   _____/ /_____  / /______/ /_\n  / ___/ //_/ _ \\/ __/ ___/ __ \\\n (__  ) ,&lt; /  __/ /_/ /__/ / / /\n/____/_/|_|\\___/\\__/\\___/_/ /_/\n\n$ /usr/games/cowsay -n &lt; sketch.txt\n __________________________________\n/          __        __       __   \\\n|    _____/ /_____  / /______/ /_  |\n|   / ___/ //_/ _ \\/ __/ ___/ __ \\ |\n|  (__  ) ,&lt; /  __/ /_/ /__/ / / / |\n| /____/_/|_|\\___/\\__/\\___/_/ /_/  |\n\\                                  /\n ----------------------------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n$ cat numbers.sh\nn=$1\nseq $n | figlet\n$ /usr/games/cowsay -n &lt; numbers.sh\n _________________\n/ n=$1            \\\n\\ seq $n | figlet /\n -----------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n$\n$ seq 2000 | tail -5\n1996\n1997\n1998\n1999\n2000\n$ echo 1234567 | sed 's/\\(...\\)+/\\1,/'\n1234567\n$ echo 1234567 | sed 's/\\(...\\)+/g\\1,/'\n1234567\n$ echo 1234567 | sed 's/\\(...\\)/g\\1,/'\ng123,4567\n$ echo 1234567 | sed 's/\\(...\\)/\\1,/'\n123,4567\n$ echo 1234567 | sed 's/\\(...\\)/\\1,/g'\n123,456,7\n$ echo 1234567 | sed 's/.*\\(...\\)/\\1,/g'\n567,\n$ echo 1234567 | sed 's/\\(...\\)+/\\1,/g'\n1234567\n$ sudo apt-get -y install wbritish\n[sudo] password for anand:\nSorry, try again.\n[sudo] password for anand:\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nwbritish is already the newest version (2020.12.07-2).\n0 upgraded, 0 newly installed, 0 to remove and 706 not upgraded.\n$\n$ ls\n1m.txt      frames          moving-circle2.c   numbers.sh\ncircle      Makefile        moving-circle.c    sketch\ncircle.c    moving-circle   moving-circle.mp4  sketch.txt\ncircle.svg  moving-circle2  moving-circle.svg\n$\n\n$ cat moving-circle.c\n#include &lt;sketch.h&gt;\n#include &lt;unistd.h&gt;\n\nint frame_count = 0;\n\n// saves each frame as file frames/0000.svg, frames/0001.svg etc.\nvoid save_frame()\n{\n    char filename[100];\n\n    // format the file name and save it into the variable filename\n    sprintf(filename, \"frames/%04d.svg\", frame_count);\n\n    // save the sketch into the frame filename\n    save_sketch(filename);\n\n    // increment the frame count, so that the next call to this function\n    // will write to a different file\n    frame_count++;\n\n    printf(\"saved %s\\n\", filename);\n}\n\nint main()\n{\n    float r = 50;\n    float y = 0;\n    float x = -300 + r;\n\n    while (x &lt; 300)\n    {\n        // clear everything that is drawn so far\n        clear_sketch();\n\n        // draw one circle\n        draw_circle(x, y, r);\n\n        // save the sketch\n        // since we are doing this in a loop, the svg extension of vscode will\n        // update the image everytime the file is updated.\n        save_frame();\n\n        // move the circle by 10 pixels to the right\n        x++;\n    }\n}\n\n$ grep draw moving-circle.c\n        // clear everything that is drawn so far\n        // draw one circle\n        draw_circle(x, y, r);\n$ grep draw_ moving-circle.c\n        draw_circle(x, y, r);\n$ seq 1000000 | grep 5 | wc -l\n468559\n$ seq 1000000 | grep '5.*5' | head\n55\n155\n255\n355\n455\n505\n515\n525\n535\n545\n$ seq 1000000 | grep '5.*5' | wc -l\n114265",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes - Mon Aug 12, 2024"
    ]
  },
  {
    "objectID": "lecture-notes/2024-08-12/index.html#solving-wordle-with-command-line",
    "href": "lecture-notes/2024-08-12/index.html#solving-wordle-with-command-line",
    "title": "Lecture Notes - Mon Aug 12, 2024",
    "section": "Solving Wordle with command-line",
    "text": "Solving Wordle with command-line\nWordle is a word game where you guess a word.\nWe are going to try solving it using unix command-line tools. For this we are going to use the command grep to match lines in a file that match given Regular Expression pattern.\nThe file /usr/share/dict/words contains all the words in the dictionary, one in each line.\n\n\n\n\n\n\nNote\n\n\n\nIf you don’t find that file, it means you don’t have a dictionary installed. Install it by running:\n$ sudo apt-get -y install wbritish\n\n\n$ wc -l /usr/share/dict/words\n104334 /usr/share/dict/words\nLet’s try to find all words that start with a prefix, say ice.\n$ grep '^ice' /usr/share/dict/words\nice\niceberg\niceberg's\nicebergs\nicebound\nicebox\niceboxes\nicebox's\nicebreaker\nicebreaker's\nicebreakers\nicecap\nicecap's\nicecaps\niced\nice's\nices\nLet’s find all the 5 letter words in the dictionary.\n$ grep '^.....$' /usr/share/dict/words | head\nABC's\nABM's\nAFAIK\nAFC's\nAMD's\nANSIs\nANZUS\nAOL's\nASCII\nASL's\n$ grep '^.....$' /usr/share/dict/words | wc -l\n7044\nThere are quite many of them. Let’s start with a guess. What shall we start with? Ok, FLAME!\n\n\n\nHow many 5-letter words are there that have letter f in them?\n$ grep '^.....$' /usr/share/dict/words | grep f | wc -l\n469\nThe letter L, A, M and E are not present in our word. Let’s try to skip all the words that have any of these characters.\n$ grep '^.....$' /usr/share/dict/words | grep f | grep -v '[lame]' | wc -l\n123\nThat is still quite a lof of them. Lets see some of those options.\n$ grep '^.....$' /usr/share/dict/words | grep f | grep -v '[lame]' | head\nAcuff\nAfros\nBuffy\nCorfu\nDuffy\nKhufu\nKnopf\nRufus\nSwift\nbiffs\nI’m going to try one of them. I’ll go with Swift.\n\n\n\nNow that we know correct letters in three positions and 6 letters that are not present, let’s see what all words are available.\n$ grep '^s.if.$' /usr/share/dict/words |  grep -v '[lamewt]' | head\nskiff\nsniff\n$ grep '^s.if.$' /usr/share/dict/words |  grep -v '[lamewt]'\nskiff\nsniff\nLet’s try with the first one skiff.\n\n\n\nYay! We solved Worle with command-line!",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes - Mon Aug 12, 2024"
    ]
  },
  {
    "objectID": "lecture-notes/02/index.html",
    "href": "lecture-notes/02/index.html",
    "title": "Lecture Notes 02",
    "section": "",
    "text": "Warning\n\n\n\nThis lecture notes is still work in progress. Not all programs covered in the class are added here yet. The remaining ones will be added soon!",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes 02"
    ]
  },
  {
    "objectID": "lecture-notes/02/index.html#introduction",
    "href": "lecture-notes/02/index.html#introduction",
    "title": "Lecture Notes 02",
    "section": "Introduction",
    "text": "Introduction\nWhy should you learn programming?\n\nA powerful programming language is more than just a means for instructing a computer to perform tasks. The language also serves as a framework within which we organize our ideas about processes.\n\n– Structure and Interpretation of Computer Programs\n\nEvery powerful language has three mechanisms for accomplishing this:\n\nprimitive expressions, which represent the simplest entities the language is concerned with,\nmeans of combination, by which compound elements are built from simpler ones, and\nmeans of abstraction, by which compound elements can be named and manipulated as units.\n\n\n– Structure and Interpretation of Computer Programs",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes 02"
    ]
  },
  {
    "objectID": "lecture-notes/02/index.html#diving-in",
    "href": "lecture-notes/02/index.html#diving-in",
    "title": "Lecture Notes 02",
    "section": "Diving in",
    "text": "Diving in\n\nA Circle\n#include &lt;sketch.h&gt;\n\nint main()\n{\n    // draw a circle with center as (0, 0) and radius 100\n    draw_circle(0, 0, 100);\n\n    // save all the shapes draws to lesson2.svg\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\n\nTwo Circles\nHow do we draw two circles instead of just one?\n#include &lt;sketch.h&gt;\n\nint main()\n{\n    draw_circle(-100, 0, 100);\n    draw_circle(100, 0, 100);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\n\nConcentric Circles\nHow about drawing two concentic circles?\n#include &lt;sketch.h&gt;\n\nint main()\n{\n    draw_circle(0, 0, 200);\n    draw_circle(0, 0, 100);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\nWhat if we want three circles?\n#include &lt;sketch.h&gt;\n\nint main()\n{\n    float r = 150;\n\n    draw_circle(0, 0, r / 3);\n    draw_circle(0, 0, 2 * r / 3);\n    draw_circle(0, 0, r);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\n\nCandle Lights\n#include &lt;sketch.h&gt;\n\nvoid bottle_circle(float bx, float by, float r)\n{\n    float cx = bx;\n    float cy = by + r;\n\n    draw_circle(cx, cy, r);\n}\n\nvoid draw_candle_light(float x, float y, float r)\n{\n    bottle_circle(x, y, r / 3);\n    bottle_circle(x, y, 2 * r / 3);\n    bottle_circle(x, y, r);\n}\n\nint main()\n{\n    draw_candle_light(-100, 0, 100);\n    draw_candle_light(100, 0, 100);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\n\nConcentric Circles\n#include &lt;sketch.h&gt;\n\nvoid concentric_circles(float x, float y, float r, float n)\n{\n    for (int i = 1; i &lt;= n; i++)\n    {\n        draw_circle(x, y, i * r / n);\n    }\n}\n\nint main()\n{\n    concentric_circles(0, 0, 250, 10);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\n\nRandom Concentric Circles\n#include &lt;sketch.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\n\nvoid random_concentric_circles(float x, float y, int r, float n)\n{\n    for (int i = 1; i &lt;= n; i++)\n    {\n        // pick a random number from 1 to r\n        float r1 = 1 + rand() % r;\n\n        draw_circle(x, y, r1);\n    }\n}\n\nint main()\n{\n    // initialize the random number generator\n    srand(time(NULL));\n\n    random_concentric_circles(0, 0, 250, 10);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\nTry running this program again and you’ll get completely different circles!",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes 02"
    ]
  },
  {
    "objectID": "lecture-notes/02/index.html#string-art",
    "href": "lecture-notes/02/index.html#string-art",
    "title": "Lecture Notes 02",
    "section": "String Art",
    "text": "String Art\nLet’s add a bit more complexity. How do you find N points equidistant on a circle?\nYes, trigonometry!\n#include &lt;sketch.h&gt;\n#include &lt;math.h&gt;\n#include &lt;time.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define N 36\n\nfloat X[N];\nfloat Y[N];\n\n// initialze the X and Y for N points\n// on circle of radius r\nvoid make_circle(float r)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        float theta = 2 * M_PI / N * i;\n        X[i] = r * cos(theta);\n        Y[i] = r * sin(theta);\n        draw_circle(X[i], Y[i], 2);\n    }\n}\n\nint main()\n{\n    make_circle(250);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\nConnecting Points\nWhat if we connect some points?\n#include &lt;sketch.h&gt;\n#include &lt;math.h&gt;\n\n#define N 36\n\nfloat X[N];\nfloat Y[N];\n\n// initialze the X and Y for N points\n// on circle of radius r\nvoid make_circle(float r)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        float theta = 2 * M_PI / N * i;\n        X[i] = r * cos(theta);\n        Y[i] = r * sin(theta);\n        draw_circle(X[i], Y[i], 2);\n    }\n}\n\nvoid connect(int i, int j)\n{\n    i = i % N;\n    j = j % N;\n    draw_line(X[i], Y[i], X[j], Y[j]);\n}\n\nint main()\n{\n    make_circle(250);\n\n    connect(0, 4);\n    connect(1, 5);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\n\nConnecting All Points\nLet’s go one step further and connect all the points.\n#include &lt;sketch.h&gt;\n#include &lt;math.h&gt;\n\n#define N 36\n\nfloat X[N];\nfloat Y[N];\n\n// initialze the X and Y for N points\n// on circle of radius r\nvoid make_circle(float r)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        float theta = 2 * M_PI / N * i;\n        X[i] = r * cos(theta);\n        Y[i] = r * sin(theta);\n        draw_circle(X[i], Y[i], 2);\n    }\n}\n\nvoid connect(int i, int j)\n{\n    i = i % N;\n    j = j % N;\n    draw_line(X[i], Y[i], X[j], Y[j]);\n}\n\nvoid connect_all(int delta)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        connect(i, i + delta);\n    }\n}\n\nint main()\n{\n    make_circle(250);\n\n    connect_all(10);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\n\nA Pattern\nWe could use connect_all multiple times to generate very interesting pattern.\n#include &lt;sketch.h&gt;\n#include &lt;math.h&gt;\n\n#define N 36\n\nfloat X[N];\nfloat Y[N];\n\n// initialze the X and Y for N points\n// on circle of radius r\nvoid make_circle(float r)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        float theta = 2 * M_PI / N * i;\n        X[i] = r * cos(theta);\n        Y[i] = r * sin(theta);\n        // draw_circle(X[i], Y[i], 2);\n    }\n}\n\nvoid connect(int i, int j)\n{\n    i = i % N;\n    j = j % N;\n    draw_line(X[i], Y[i], X[j], Y[j]);\n}\n\nvoid connect_all(int delta)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        connect(i, i + delta);\n    }\n}\n\nint main()\n{\n    make_circle(250);\n\n    connect_all(16);\n    connect_all(12);\n    connect_all(7);\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\n\nCardoid\n#include &lt;sketch.h&gt;\n#include &lt;math.h&gt;\n#include &lt;time.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define N 72\n\nfloat X[N];\nfloat Y[N];\n\n// initialze the X and Y for N points\n// on circle of radius r\nvoid make_circle(float r)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        float theta = 2 * M_PI / N * i;\n        X[i] = r * cos(theta);\n        Y[i] = r * sin(theta);\n        // draw_circle(X[i], Y[i], 2);\n    }\n}\n\nvoid connect(int i, int j)\n{\n    i = i % N;\n    j = j % N;\n    draw_line(X[i], Y[i], X[j], Y[j]);\n}\n\nvoid connect_all(int delta)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        connect(i, i + delta);\n    }\n}\n\nint main()\n{\n    // initialize the random number generator\n    srand(time(NULL));\n\n    make_circle(250);\n\n    for (int i = 0; i &lt; N; i++)\n    {\n        connect(i, 2 * i);\n    }\n\n    save_sketch(\"lesson2.svg\");\n}\n\n\n\n\n\nFinal Touch\n#include &lt;sketch.h&gt;\n#include &lt;math.h&gt;\n#include &lt;time.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define N 720\n\nfloat X[N];\nfloat Y[N];\n\n// initialze the X and Y for N points\n// on circle of radius r\nvoid make_circle(float r)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        float theta = 2 * M_PI / N * i;\n        X[i] = r * cos(theta);\n        Y[i] = r * sin(theta);\n        // draw_circle(X[i], Y[i], 2);\n    }\n}\n\nvoid connect(int i, int j)\n{\n    i = i % N;\n    j = j % N;\n    draw_line(X[i], Y[i], X[j], Y[j]);\n}\n\nvoid connect_all(int delta)\n{\n    for (int i = 0; i &lt; N; i++)\n    {\n        connect(i, i + delta);\n    }\n}\n\nint main()\n{\n    // initialize the random number generator\n    srand(time(NULL));\n\n    set_stroke_width(0.5);\n    set_stroke(\"#44444480\");\n\n    make_circle(250);\n\n    // connect_all(16);\n    // connect_all(12);\n    // connect_all(7);\n\n    for (int i = 0; i &lt; N; i++)\n    {\n        int d = N / 6;\n\n        connect(i, (i * i) % d);\n    }\n\n    save_sketch(\"lesson2.svg\");\n}",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes 02"
    ]
  },
  {
    "objectID": "lecture-notes/02/index.html#references",
    "href": "lecture-notes/02/index.html#references",
    "title": "Lecture Notes 02",
    "section": "References",
    "text": "References\n\nStructure and Interpretation of Computer Programs\nCurve stitching: the art of sewing beautiful mathematical patterns, Jon Millington",
    "crumbs": [
      "Lecture Notes",
      "Lecture Notes 02"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fundamentals of Computing and Programming",
    "section": "",
    "text": "Welcome to the Fundamentals of Computing and Programming course.\nPlease look at the course page on ISI Bangalore website for syllabus and other details.",
    "crumbs": [
      "Fundamentals of Computing and Programming"
    ]
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Fundamentals of Computing and Programming",
    "section": "Introduction",
    "text": "Introduction\nThis course uses unix environment for writing, compiling and executing c programs.\nIf you are using Linux or Mac, you probably don’t need to setup anything. If you are on windows, you can set up Ubuntu using WSL and the instructions are provided in the Software Setup page.",
    "crumbs": [
      "Fundamentals of Computing and Programming"
    ]
  },
  {
    "objectID": "index.html#credits",
    "href": "index.html#credits",
    "title": "Fundamentals of Computing and Programming",
    "section": "Credits",
    "text": "Credits\nThis course is taught of Prof. Jishnu Biswas, ISI Bangalore.\nThis website is setup by Anand Chitipothu.",
    "crumbs": [
      "Fundamentals of Computing and Programming"
    ]
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Fundamentals of Computing and Programming",
    "section": "License",
    "text": "License\nThis work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.\n\n\n\nCC BY-SA 4.0",
    "crumbs": [
      "Fundamentals of Computing and Programming"
    ]
  }
]